/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */

#include "ultima/ultima1/core/resources.h"
#include "common/algorithm.h"

namespace Ultima {
namespace Ultima1 {

const char *const SRC_TITLE_MESSAGES[13] = {
	"Ultima I",
	"The First Age of Darkness",
	"Copyright (C) 1987 Origin Systems, Inc.",
	"Presents...",
	"...a new release of the best",
	"   selling personal computer",
	"   role-playing adventure...",
	"...Lord British's original",
	"   fantasy masterpiece...",
	"ULTIMA and LORD BRITISH are registered",
	"trademarks of Richard Garriott and",
	"Origin Systems, Inc.",
	"Conversion by: John Fachini"
};

const char *const SRC_MAIN_MENU_TEXT[7] = {
	"*** Ultima I ***",  "from darkest", "dungeons, to", "deepest space!",
	"a) Generate new character", "b) Continue previous game", "Thy choice: "
};

const char *const SRC_STATUS_TEXT[4] = { "Hits:", "Food:",  "Exp.:", "Coin:" };

const char *const SRC_DIRECTION_NAMES[4] = { "West", "East", "North", "South" };

const char *const SRC_DUNGEON_MOVES[4] = { "Turn left", "Turn right", "Forward", "Turn around" };

const char *const SRC_LOCATION_NAMES[LOCATION_COUNT] = {
	"Britian",
	"Moon",
	"Fawn",
	"Paws",
	"Montor",
	"Yew",
	"Tune",
	"Grey",
	"Arnold",
	"Linda",
	"Helen",
	"Owen",
	"John",
	"Gerry",
	"Wolf",
	"The Snake",
	"Nassau",
	"Clear Lagoon",
	"Stout",
	"Gauntlet",
	"Imagination",
	"Ponder",
	"Wealth",
	"Poor",
	"Gorlab",
	"Dextron",
	"Magic",
	"Wheeler",
	"Bulldozer",
	"The Brother",
	"Turtle",
	"Lost Friends",

	"The Castle of Lord British",
	"The Castle of the Lost King",
	"The Castle Barataria",
	"The Castle Rondorin",
	"The Castle of Olympus",
	"The Black Dragon's Castle",
	"The White Dragon's Castle",
	"The Castle of Shamino",

	"The Pillars of Protection",
	"The Tower of Knowledge",
	"The Pillars of the Argonauts",
	"The Pillar of Ozymandias",
	"The Sign Post",
	"The Southern Sign Post",
	"The Eastern Sign Post",

	"The Grave of the Lost Soul",
	"The Unholy Hole",
	"The Dungeon of Perinia",
	"The Dungeon of Montor",
	"The Mines of Mt. Drash",
	"Mondain's Gate to Hell",
	"The Lost Caverns",
	"The Dungeon of Doubt",
	"The Mines of Mt. Drash II",
	"Death's Awakening",
	"The Savage Place",
	"Scorpion Hole",
	"Advari's Hole",
	"The Dead Warrior's Fight",
	"The Horror of the Harpies",
	"The Labyrinth",
	"Where Hercules Died",
	"The Horror of the Harpies II",
	"The Gorgon Hole",
	"The Tramp of Doom",
	"The Viper's Pit",
	"The Long Death",
	"The End...",
	"The Viper's Pit II",
	"The Slow Death",
	"The Guild of Death",
	"The Metal Twister",
	"The Troll's Hole",
	"The Skull Smasher",
	"The Spine Breaker",
	"The Dungeon of Doom",
	"The Dead Cat's Life",
	"The Morbid Adventure",
	"Free Death Hole",
	"Dead Man's Walk",
	"The Dead Cat's Life II",
	"The Hole to Hades"
};

static const char *const SRC_DUNGEON_ITEM_NAMES[2] = { "Chest", "Coffin" };

static const char *SRC_WEAPON_NAMES_UPPERCASE[16] = {
	"Hands", "Dagger", "Mace", "Axe", "Rope & Spikes", "Sword", "Great Sword"
	"Bow & Arrows", "Amulet", "Pistol", "Light Sword", "Phazor", "Blaster"
};

static const char *SRC_WEAPON_NAMES_LOWERCASE[16] = {
	"hands", "dagger", "mace", "axe", "rope", "sword", "g sword", "bow",
	"amulet", "wand", "staff" "triangle", "pistol", "L sword", "phazor", "blaster"
};

static const char *SRC_ARMOR_NAMES[6] = {
	"Skin", "Leather armor", "Chain mail", "Plate mail", "Vacuum suit", "Reflect suit"
};

static const char *SRC_SPELL_NAMES[11] = {
	"Prayer", "Open", "Unlock", "Magic Missile", "Steal", "Ladder Down", "Ladder Up",
	"Blink", "Create", "Destroy", "Kill"
};

const byte SRC_LOCATION_X[LOCATION_COUNT] = {
	39, 66, 25, 46, 52, 18, 70, 64, 126, 128, 148, 115, 150, 121,
	150, 109, 42, 44, 64, 31, 66, 37, 66, 25, 128, 101, 142, 121,
	115, 149, 97, 103, 40, 32, 125, 114, 41, 30, 127, 135, 36, 69,
	96, 97, 13, 12, 131, 98, 48, 18, 53, 59, 29, 13, 62, 39,
	38, 130, 100, 124, 155, 147, 98, 109, 116, 136, 52, 32, 25, 14,
	63, 71, 40, 16, 46, 119, 149, 114, 108, 138, 154, 105, 128, 129
};
const byte SRC_LOCATION_Y[LOCATION_COUNT] = {
	39, 41, 61, 28, 63, 34, 63, 22, 36, 63, 22, 43, 49, 15,
	67, 61, 119, 92, 133, 112, 106, 140, 88, 94, 117, 119, 139, 106,
	141, 112, 141, 100, 38, 27, 37, 29, 118, 126, 116, 105, 9, 10,
	33, 66, 89, 122, 87, 88, 11, 13, 22, 29, 37, 43, 49, 60,
	68, 10, 15, 26, 35, 36, 45, 50, 56, 59, 96, 99, 105, 110,
	119, 120, 129, 140, 145, 89, 91, 100, 107, 115, 121, 127, 138, 146
};

const int SRC_LOCATION_PEOPLE[150][4] = {
	{ 20, 33, 4, 2000 },
	{ 22, 35, 12, 1 },
	{ 17, 1, 6, 500 },
	{ 17, 17, 6, 500 },
	{ 17, 17, 11, 500 },
	{ 17, 25, 7, 500 },
	{ 17, 25, 12, 500 },
	{ 17, 36, 9, 500 },
	{ 19, 35, 6, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 20, 25, 4, 2000 },
	{ 22, 31, 2, 1 },
	{ 17, 28, 12, 500 },
	{ 17, 34, 12, 500 },
	{ 17, 0, 8, 500 },
	{ 17, 11, 3, 500 },
	{ 17, 22, 1, 500 },
	{ 17, 28, 1, 500 },
	{ 17, 33, 5, 500 },
	{ 19, 22, 14, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 19, 15, 5, 1 },
	{ 50, 34, 6, 1 },
	{ 17, 2, 9, 500 },
	{ 17, 16, 16, 500 },
	{ 17, 18, 2, 500 },
	{ 17, 20, 8, 500 },
	{ 17, 21, 16, 500 },
	{ 17, 36, 8, 500 },
	{ 21, 6, 3, 1 },
	{ 21, 6, 14, 1 },
	{ 21, 13, 14, 1 },
	{ 21, 25, 3, 1 },
	{ 21, 25, 12, 1 },
	{ 21, 32, 3, 1 },
	{ -1, 0, 0, 0 },
	{ 19, 15, 9, 1 },
	{ 50, 27, 3, 1 },
	{ 17, 1, 10, 500 },
	{ 17, 9, 8, 500 },
	{ 17, 16, 1, 500 },
	{ 17, 21, 16, 500 },
	{ 17, 36, 7, 500 },
	{ 21, 4, 16, 1 },
	{ 21, 5, 3, 1 },
	{ 21, 12, 3, 1 },
	{ 21, 30, 1, 1 },
	{ 21, 34, 12, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 19, 17, 3, 1 },
	{ 50, 21, 5, 1 },
	{ 17, 10, 10, 500 },
	{ 17, 15, 15, 500 },
	{ 17, 22, 15, 500 },
	{ 17, 23, 9, 500 },
	{ 21, 3, 12, 1 },
	{ 21, 6, 3, 1 },
	{ 21, 19, 1, 1 },
	{ 21, 34, 1, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 19, 19, 12, 1 },
	{ 50, 24, 3, 1 },
	{ 17, 1, 7, 500 },
	{ 17, 1, 11, 500 },
	{ 17, 8, 16, 500 },
	{ 17, 14, 7, 500 },
	{ 17, 29, 16, 500 },
	{ 17, 36, 11, 500 },
	{ 21, 4, 1, 1 },
	{ 21, 12, 1, 1 },
	{ 21, 17, 1, 1 },
	{ 21, 22, 1, 1 },
	{ 21, 28, 1, 1 },
	{ 21, 34, 1, 1 },
	{ -1, 0, 0, 0 },
	{ 17, 17, 2, 500 },
	{ 17, 17, 15, 500 },
	{ 17, 20, 2, 500 },
	{ 17, 20, 15, 500 },
	{ 21, 12, 8, 1 },
	{ 21, 25, 8, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 50, 20, 4, 1 },
	{ 17, 1, 1, 500 },
	{ 17, 1, 16, 500 },
	{ 17, 8, 9, 500 },
	{ 17, 16, 15, 500 },
	{ 17, 18, 10, 500 },
	{ 17, 21, 15, 500 },
	{ 17, 29, 9, 500 },
	{ 17, 36, 1, 500 },
	{ 17, 36, 16, 500 },
	{ 21, 8, 4, 1 },
	{ 21, 9, 13, 1 },
	{ 21, 18, 2, 1 },
	{ 21, 28, 13, 1 },
	{ 21, 29, 4, 1 },
	{ 19, 31, 14, 1 },
	{ 50, 27, 6, 1 },
	{ 17, 4, 11, 500 },
	{ 17, 17, 14, 500 },
	{ 17, 20, 14, 500 },
	{ 21, 7, 4, 1 },
	{ 21, 18, 4, 1 },
	{ 21, 29, 3, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 },
	{ 19, 19, 10, 5 },
	{ 17, 6, 12, 500 },
	{ 17, 6, 15, 500 },
	{ 17, 7, 7, 500 },
	{ 17, 9, 5, 500 },
	{ 17, 28, 17, 500 },
	{ 17, 37, 8, 500 },
	{ 21, 1, 13, 1 },
	{ 21, 4, 1, 1 },
	{ 21, 16, 1, 1 },
	{ 21, 24, 1, 1 },
	{ 21, 33, 16, 1 },
	{ 21, 34, 1, 1 },
	{ -1, 0, 0, 0 },
	{ -1, 0, 0, 0 }
};

#define OFFSET(x) (x & 0xff), (x >> 8)

static const byte SRC_DUNGEON_DRAW_DATA[1964] = {
	OFFSET(60),			// Ranger
	OFFSET(168),		// Skeleton
	OFFSET(271),		// Thief
	OFFSET(319),		// Giant Rat
	OFFSET(374),		// Rat
	OFFSET(424),		// Spider
	OFFSET(531),		// Viper
	OFFSET(619),		// Orc
	OFFSET(706),		// Cyclops
	OFFSET(782),		// Gelatinous Cube
	OFFSET(794),		// Ettin
	OFFSET(871),		// Mimic
	OFFSET(899),		// Lizard Man
	OFFSET(993),		// Minotaur
	OFFSET(1081),		// Carrion Creeper
	OFFSET(1123),		// Tangler
	OFFSET(1209),		// Gremlin
	OFFSET(1254),		// Wandering Eyes
	OFFSET(1397),		// Wraith
	OFFSET(1471),		// Lich
	OFFSET(1552),		// Invisible Seeker
	OFFSET(1553),		// Wind Whipper
	OFFSET(1623),		// Zorn
	OFFSET(1706),		// Daemon
	OFFSET(1791),		// Balron
	OFFSET(1869),		// Coffin
	OFFSET(1903),		// Unknown 1
	OFFSET(1915),		// Unknown 2
	OFFSET(1927),		// Unknown 3
	OFFSET(1958),		// Unknown 4
	0x7E, 0xE1, 0xFC, 0x1E, 0xFC, 0x0C, 0xE0, 0x0C, 0xDB, 0x12, 0xD4, 0x2A, 0xDB, 0x2A, 0xCF, 0x12,
	0xCB, 0x06, 0xC3, 0x0C, 0xBB, 0x0C, 0xB6, 0x06, 0xB3, 0xF9, 0xB3, 0xF3, 0xB6, 0xF3, 0xBB, 0xF9,
	0xC3, 0xED, 0xCB, 0xD5, 0xCF, 0xD5, 0xDB, 0xED, 0xD4, 0xF3, 0xDB, 0xF3, 0xE0, 0xE1, 0xFC, 0x7E,
	0xED, 0xFC, 0xE7, 0x00, 0xF3, 0x00, 0xF3, 0xFC, 0x7E, 0x12, 0xFC, 0x18, 0x00, 0x0C, 0x00, 0x0C,
	0xFC, 0x7E, 0xF3, 0xDB, 0x0C, 0xDB, 0x7E, 0xF3, 0xE0, 0x0C, 0xE0, 0x7E, 0xF3, 0xC7, 0xF9, 0xCB,
	0x06, 0xCB, 0x0C, 0xC7, 0x7E, 0x00, 0xD4, 0x00, 0xCB, 0x7E, 0xFB, 0xBF, 0x04, 0xBF, 0x7E, 0x00,
	0xBB, 0x06, 0xB6, 0x06, 0xBB, 0xF9, 0xBB, 0xF9, 0xB6, 0x00, 0xBB, 0x7F, 0x7E, 0xDB, 0x00, 0xE7,
	0x00, 0xE7, 0xEC, 0xF3, 0xE2, 0x0C, 0xE2, 0x18, 0xEC, 0x18, 0x00, 0x24, 0x00, 0x7E, 0x00, 0xE7,
	0x00, 0xB6, 0x7E, 0xFC, 0xD8, 0x03, 0xD8, 0x7E, 0xF8, 0xCF, 0x07, 0xCF, 0x7E, 0xF5, 0xC5, 0x0A,
	0xC5, 0x7E, 0xE7, 0xCF, 0xF3, 0xBB, 0x0C, 0xBB, 0x18, 0xCF, 0x7E, 0xDB, 0xC5, 0xDB, 0xCF, 0xCF,
	0xC5, 0xDB, 0xC5, 0xF3, 0xD8, 0x7E, 0x18, 0xD4, 0x18, 0xC0, 0x7E, 0x12, 0xCF, 0x1E, 0xCF, 0x7E,
	0xF9, 0xB6, 0x06, 0xB6, 0x0C, 0xAD, 0x0C, 0xA8, 0x06, 0xA3, 0xF9, 0xA3, 0xF3, 0xA8, 0xF3, 0xAD,
	0xF9, 0xB6, 0x7E, 0xF9, 0xA3, 0x00, 0xA8, 0x7E, 0xF9, 0xAD, 0x7E, 0x06, 0xAD, 0x7E, 0xF9, 0xB1,
	0x06, 0xB1, 0x7F, 0x7E, 0x00, 0xBC, 0x00, 0xF7, 0x0C, 0x00, 0x24, 0x00, 0x24, 0xC0, 0x0C, 0xB3,
	0x00, 0xBC, 0xF3, 0xB3, 0xDB, 0xC0, 0xDB, 0x00, 0xF3, 0x00, 0x00, 0xF7, 0x7E, 0x0C, 0xB3, 0x0C,
	0xA4, 0x00, 0x9B, 0xF3, 0xA4, 0xF3, 0xB3, 0x7E, 0xF3, 0xA4, 0x00, 0xB6, 0x0C, 0xA4, 0x00, 0xA0,
	0xF3, 0xA4, 0x7F, 0x7E, 0xF9, 0xCF, 0xE7, 0xF3, 0xF3, 0x00, 0x0C, 0x00, 0x18, 0xF3, 0x06, 0xCF,
	0x7E, 0x00, 0xDB, 0xF3, 0xC3, 0x00, 0xC9, 0x0C, 0xC3, 0x00, 0xDB, 0x7E, 0x06, 0xC9, 0x02, 0xCF,
	0x7E, 0xF9, 0xC9, 0xFD, 0xCF, 0x7E, 0xFB, 0xE7, 0xFB, 0xE1, 0x7E, 0xF6, 0xE7, 0xF6, 0xE1, 0x7E,
	0x09, 0xE7, 0x09, 0xE1, 0x7E, 0x04, 0xE7, 0x04, 0xE1, 0x7F, 0x7E, 0x03, 0xC7, 0x15, 0xBE, 0x2B,
	0xBE, 0x36, 0xC3, 0x2B, 0xB4, 0x15, 0xAF, 0x03, 0xB6, 0x07, 0xB1, 0x07, 0xAA, 0x03, 0xAD, 0xFD,
	0xAD, 0xF8, 0xAA, 0xF8, 0xB1, 0xFC, 0xB6, 0xEA, 0xAF, 0xD4, 0xB4, 0xC9, 0xC3, 0xD4, 0xBE, 0xEA,
	0xBE, 0xFC, 0xC7, 0x03, 0xC7, 0x7E, 0xFD, 0xB0, 0x7E, 0x02, 0xB0, 0x7F, 0x7E, 0xE7, 0xDB, 0x18,
	0xE7, 0x30, 0xDB, 0x18, 0xC3, 0x00, 0xB6, 0xCF, 0xAA, 0xB6, 0xB6, 0xCF, 0xCF, 0xE7, 0xDB, 0xE7,
	0xE1, 0xC3, 0xE7, 0xDB, 0xE1, 0xDB, 0xD5, 0xC3, 0xD5, 0xB6, 0xDB, 0xC3, 0xCF, 0x00, 0xCF, 0x00,
	0xDB, 0xE7, 0xDB, 0xE7, 0xC3, 0xCF, 0xC3, 0xCF, 0xCF, 0x7E, 0xE7, 0xC3, 0x00, 0xCF, 0x7E, 0x18,
	0xE7, 0x3C, 0xF3, 0x00, 0x01, 0x7E, 0x20, 0xE3, 0x4F, 0xE7, 0x79, 0x00, 0x7E, 0x29, 0xDF, 0x4F,
	0xDB, 0x79, 0xED, 0x7E, 0x30, 0xDB, 0x4F, 0xC9, 0x79, 0xDB, 0x7E, 0xB6, 0xB6, 0x92, 0xC9, 0x86,
	0xE1, 0x7E, 0xBE, 0xB3, 0xAA, 0x9E, 0x86, 0xB6, 0x7E, 0xC6, 0xAE, 0xC3, 0x98, 0x9E, 0x86, 0x7E,
	0xCF, 0xAA, 0xE7, 0x98, 0xB6, 0x86, 0x7F, 0x7E, 0xE7, 0xED, 0xE7, 0xE7, 0xDB, 0xDB, 0xDB, 0x00,
	0x24, 0x00, 0x24, 0xED, 0xDB, 0xED, 0x7E, 0x18, 0xED, 0x0C, 0xE7, 0x0C, 0xD5, 0xF3, 0xD5, 0xF3,
	0xE7, 0x00, 0xED, 0x7E, 0xE7, 0xF9, 0x24, 0xF9, 0x24, 0xF3, 0xDB, 0xF3, 0x7E, 0xF3, 0xE7, 0x0C,
	0xE7, 0x0C, 0xE1, 0xF3, 0xE1, 0xF3, 0xDB, 0x0C, 0xDB, 0x0C, 0xD5, 0xF3, 0xD5, 0x7E, 0x0C, 0xCC,
	0xF3, 0xCC, 0xE7, 0xDB, 0x00, 0xCC, 0x18, 0xDB, 0x0C, 0xCC, 0x7E, 0xED, 0xD5, 0xED, 0xCC, 0xF3,
	0xC3, 0x0C, 0xC3, 0x11, 0xCC, 0x12, 0xD5, 0x7E, 0xED, 0xCC, 0x00, 0xC3, 0x0F, 0xCC, 0x7F, 0x7E,
	0xE7, 0x00, 0x18, 0x00, 0x0C, 0xF7, 0x0C, 0xED, 0x18, 0xE5, 0x18, 0xED, 0x24, 0xE5, 0x24, 0xC9,
	0x18, 0xC0, 0xE7, 0xC0, 0x7E, 0xE7, 0x00, 0xF3, 0xF7, 0xF3, 0xED, 0xE7, 0xE5, 0xE7, 0xED, 0xDB,
	0xE5, 0xDB, 0xC9, 0xE7, 0xC0, 0x7E, 0x0C, 0xC0, 0x18, 0xAE, 0x0C, 0xA4, 0xF3, 0xA4, 0xE7, 0xAE,
	0xF3, 0xC0, 0x7E, 0x18, 0xAE, 0xE7, 0xAE, 0x7E, 0xDB, 0xED, 0x0C, 0xC9, 0x18, 0xC9, 0x00, 0xDB,
	0x00, 0xD2, 0xF3, 0xD2, 0x0C, 0xC0, 0x0C, 0xC9, 0x7E, 0x00, 0xB6, 0x0C, 0xAE, 0x0C, 0xB6, 0xF3,
	0xB6, 0xF3, 0xAE, 0x00, 0xB6, 0x7F, 0x7E, 0x00, 0xE1, 0x06, 0x00, 0x1E, 0x00, 0x12, 0xF9, 0x08,
	0xE1, 0x12, 0xC9, 0x1E, 0xE1, 0x24, 0xE1, 0x1E, 0xC3, 0x06, 0xBC, 0x12, 0xB6, 0x12, 0xB0, 0x06,
	0xAA, 0x7E, 0x00, 0xE1, 0xF9, 0x00, 0xE1, 0x00, 0xED, 0xF9, 0xF7, 0xE1, 0xED, 0xC9, 0xE1, 0xE1,
	0xDB, 0xE1, 0xE1, 0xC3, 0xF9, 0xBC, 0xED, 0xB6, 0xED, 0xB0, 0xF9, 0xAA, 0x7E, 0x06, 0xAA, 0xF9,
	0xAA, 0x7E, 0x0C, 0xB0, 0x00, 0xAD, 0xF3, 0xB0, 0x00, 0xB4, 0x0C, 0xB0, 0x7E, 0xF3, 0xB6, 0x0C,
	0xB6, 0x7F, 0x7E, 0xB5, 0xF1, 0x4B, 0xF1, 0x4B, 0xAB, 0xB5, 0xAB, 0xB5, 0xF1, 0x7F, 0x7E, 0x00,
	0xE1, 0x18, 0x00, 0x30, 0x00, 0x24, 0xF9, 0x12, 0xD5, 0x18, 0xC9, 0x24, 0xCF, 0x24, 0xDB, 0x30,
	0xDB, 0x30, 0xC9, 0x12, 0xB6, 0x24, 0xB6, 0x24, 0xA5, 0x0C, 0xA5, 0x0C, 0xB3, 0xF3, 0xB3, 0x7E,
	0x00, 0xE1, 0xE7, 0x00, 0xCF, 0x00, 0xDB, 0xF9, 0xED, 0xD5, 0xE7, 0xC6, 0xCF, 0xCC, 0xBA, 0xBE,
	0xC3, 0xB6, 0xCF, 0xBF, 0xED, 0xB6, 0xDB, 0xB6, 0xDB, 0xA5, 0xF3, 0xA5, 0xF3, 0xB3, 0x7E, 0x1C,
	0xB1, 0x7E, 0x15, 0xAB, 0x7E, 0xE3, 0xB1, 0x7E, 0xEA, 0xAB, 0x7F, 0x7E, 0xE7, 0x05, 0xE7, 0xE7,
	0x18, 0xE7, 0x18, 0x05, 0xE7, 0x05, 0x7E, 0xE7, 0xE7, 0xF3, 0xDB, 0x24, 0xDB, 0x24, 0xF3, 0x18,
	0x05, 0x7E, 0x18, 0xE7, 0x24, 0xDB, 0x7F, 0x7E, 0x06, 0xC9, 0x0E, 0xD5, 0x06, 0xE7, 0x06, 0xED,
	0x14, 0x00, 0x1E, 0x00, 0x18, 0xF9, 0x12, 0xE7, 0x12, 0xDB, 0x7E, 0x06, 0xC9, 0xF9, 0xC9, 0xF1,
	0xD5, 0xF9, 0xE7, 0xF9, 0xED, 0xEB, 0x00, 0xE1, 0x00, 0xE7, 0xF9, 0xED, 0xE7, 0xED, 0xDB, 0x7E,
	0x12, 0xDB, 0x1E, 0xC9, 0x1E, 0xB6, 0x18, 0xBC, 0x18, 0xC9, 0x12, 0xC9, 0x06, 0xC3, 0x12, 0xBC,
	0x06, 0xB6, 0xF9, 0xB6, 0xE7, 0xBC, 0xE7, 0xBF, 0xF9, 0xC3, 0xE7, 0xCF, 0xE7, 0xE7, 0xED, 0xE1,
	0x7E, 0xE7, 0xBE, 0xF9, 0xBE, 0x7E, 0x02, 0xBA, 0x7E, 0xF9, 0xED, 0x0F, 0xF9, 0x7E, 0x18, 0xF9,
	0x2A, 0xF3, 0x1E, 0x00, 0x7F, 0x7E, 0x00, 0xE1, 0x12, 0xE7, 0x12, 0xF9, 0x1E, 0x00, 0x2A, 0x00,
	0x1E, 0xF9, 0x1E, 0xE1, 0x12, 0xD5, 0x12, 0xCF, 0x2A, 0xBC, 0x2A, 0xAA, 0x1E, 0xB6, 0x12, 0xBC,
	0x06, 0xB6, 0x7E, 0x00, 0xE1, 0xED, 0xE7, 0xED, 0xF9, 0xE1, 0x00, 0xD5, 0x00, 0xE1, 0xF9, 0xE1,
	0xE1, 0xED, 0xD5, 0xED, 0xCF, 0xD5, 0xBC, 0xD5, 0xAA, 0xE1, 0xB6, 0xED, 0xBC, 0xF9, 0xB6, 0x7E,
	0x0C, 0xAE, 0x06, 0xB6, 0x06, 0xBA, 0xF9, 0xBA, 0xF9, 0xB6, 0xF3, 0xAE, 0xED, 0xA4, 0xF9, 0xAA,
	0x06, 0xAA, 0x12, 0xA4, 0x0C, 0xAE, 0x7E, 0xFB, 0xAF, 0x7E, 0x04, 0xAF, 0x7F, 0x7E, 0xE7, 0x86,
	0xE7, 0x92, 0xF3, 0x9E, 0x0C, 0x9E, 0x18, 0x92, 0x18, 0x86, 0x7E, 0xE7, 0x92, 0xD5, 0xA4, 0xD5,
	0xC3, 0x7E, 0xF3, 0x9E, 0xE7, 0xB6, 0xF3, 0xCF, 0x7E, 0x0C, 0x9E, 0x18, 0xB6, 0x0C, 0xDB, 0x7E,
	0x18, 0x92, 0x2A, 0xAA, 0x30, 0xC3, 0x7F, 0x7E, 0xE7, 0x00, 0xF3, 0xED, 0xF3, 0xB6, 0x00, 0xAA,
	0x06, 0xAA, 0x0C, 0xB0, 0x0C, 0xE7, 0x18, 0x00, 0x7E, 0xF3, 0xDB, 0xE7, 0xED, 0xDB, 0xE7, 0xE1,
	0xE1, 0x7E, 0xF3, 0xC9, 0xE1, 0xD5, 0xDB, 0xC9, 0xE1, 0xBC, 0x7E, 0xF3, 0xBC, 0xE7, 0xB6, 0xE1,
	0xAA, 0xED, 0x9E, 0x7E, 0x0C, 0xB6, 0x18, 0xB0, 0x12, 0xA4, 0x06, 0x9E, 0x7E, 0x0C, 0xC3, 0x18,
	0xC9, 0x24, 0xC3, 0x24, 0xB0, 0x7E, 0x0C, 0xD5, 0x18, 0xE1, 0x1E, 0xE1, 0x24, 0xD5, 0x7E, 0x00,
	0xB6, 0xF9, 0xBC, 0x00, 0xC3, 0x06, 0xBC, 0x00, 0xB6, 0x7E, 0x00, 0xBC, 0x7F, 0x7E, 0xE7, 0x00,
	0xED, 0x00, 0xF3, 0xF9, 0xED, 0xF3, 0xF9, 0xE7, 0x18, 0xE1, 0x0C, 0xED, 0x12, 0xF3, 0x0C, 0xF9,
	0x12, 0x00, 0x18, 0x00, 0x7E, 0xF3, 0xED, 0x0C, 0xED, 0x7E, 0xF3, 0xF9, 0x0C, 0xF9, 0x7E, 0xF9,
	0xF1, 0x7E, 0x06, 0xF1, 0x7E, 0xF9, 0xF6, 0x06, 0xF6, 0x7F, 0x7E, 0x06, 0xDB, 0x0E, 0xD2, 0x0E,
	0xC6, 0x06, 0xBC, 0xF9, 0xBC, 0x7E, 0x06, 0xDB, 0xF9, 0xDB, 0xF1, 0xD2, 0xF1, 0xC6, 0xF9, 0xBC,
	0x7E, 0x00, 0xC3, 0x06, 0xCC, 0x00, 0xD5, 0xF9, 0xCC, 0x00, 0xC3, 0x7E, 0x00, 0xC9, 0x00, 0xCF,
	0x7E, 0x0E, 0xD2, 0x14, 0xD5, 0x18, 0xD2, 0x18, 0xCF, 0x1E, 0xCF, 0x1E, 0xD5, 0x18, 0xD5, 0x18,
	0xCF, 0x7E, 0xF1, 0xD2, 0xEB, 0xCF, 0xE7, 0xD2, 0xE7, 0xCF, 0xE1, 0xCF, 0xE1, 0xD5, 0xE7, 0xD5,
	0xE7, 0xCF, 0x7E, 0xF1, 0xC6, 0xEB, 0xC6, 0xE7, 0xC0, 0xE7, 0xC0, 0xE7, 0xC3, 0xE1, 0xC3, 0xE1,
	0xBC, 0xE7, 0xBC, 0xE7, 0xC3, 0x7E, 0x0E, 0xC6, 0x12, 0xC0, 0x18, 0xC0, 0x18, 0xC3, 0x1E, 0xC3,
	0x1E, 0xBC, 0x18, 0xBC, 0x18, 0xC3, 0x7E, 0x06, 0xBC, 0x08, 0xB4, 0x0C, 0xB4, 0x0C, 0xB6, 0x12,
	0xB6, 0x12, 0xB0, 0x0C, 0xB0, 0x0C, 0xB6, 0x7E, 0xF9, 0xBC, 0xF7, 0xB6, 0xF3, 0xB4, 0xF3, 0xB6,
	0xED, 0xB6, 0xED, 0xB0, 0xF3, 0xB0, 0xF3, 0xB6, 0x7F, 0x7E, 0xCF, 0x00, 0xDB, 0xDB, 0xE7, 0xAA,
	0x00, 0x9E, 0x0C, 0x9E, 0x18, 0xAA, 0x12, 0xB6, 0x12, 0xC3, 0x18, 0xDB, 0x18, 0xDB, 0x24, 0x00,
	0x7E, 0x00, 0xAA, 0x0C, 0xA4, 0x12, 0xAA, 0x0C, 0xB6, 0x06, 0xB6, 0x00, 0xB0, 0x00, 0xAA, 0x7E,
	0xE1, 0xC3, 0xF3, 0xD5, 0x7E, 0xF3, 0xB6, 0xF3, 0xC3, 0xF9, 0xCF, 0x7E, 0x06, 0xCF, 0x12, 0xDB,
	0x7E, 0x0C, 0xC3, 0x12, 0xCF, 0x7E, 0x00, 0xDB, 0x00, 0xF3, 0xF9, 0x00, 0x7E, 0x06, 0xAB, 0x7E,
	0x0C, 0xAB, 0x7F, 0x7E, 0x0C, 0xA4, 0x12, 0xA9, 0x18, 0xB3, 0x18, 0xBC, 0x12, 0xC0, 0x06, 0xD7,
	0xF9, 0xD7, 0x7E, 0x0C, 0xA4, 0xF3, 0xA4, 0xED, 0xA9, 0xE7, 0xB3, 0xE7, 0xBC, 0xED, 0xC0, 0xF9,
	0xD7, 0x7E, 0xED, 0xB3, 0xF3, 0xAE, 0xF9, 0xAE, 0x00, 0xB3, 0x7E, 0x12, 0xB3, 0x0C, 0xAE, 0x06,
	0xAE, 0x00, 0xB3, 0x7E, 0x12, 0xB3, 0x0C, 0xB6, 0x06, 0xB6, 0x00, 0xB3, 0x7E, 0xED, 0xB3, 0xF3,
	0xB6, 0xF9, 0xB6, 0x00, 0xB3, 0x7E, 0xF9, 0xC9, 0x06, 0xC9, 0x7E, 0xF9, 0xBC, 0x06, 0xBC, 0x00,
	0xC0, 0xF9, 0xBC, 0x7F, 0x7F, 0x7E, 0x09, 0xAD, 0x0E, 0xAD, 0x09, 0xBB, 0x18, 0xC0, 0x27, 0x00,
	0xD8, 0x00, 0xE7, 0xC0, 0xF6, 0xBB, 0xF1, 0xAD, 0xF6, 0xAD, 0x7E, 0xEC, 0xE2, 0xF1, 0xC5, 0xFB,
	0xBB, 0xF6, 0xA8, 0x00, 0xA3, 0x09, 0xA8, 0x04, 0xBB, 0x0E, 0xC5, 0x13, 0xE2, 0x7E, 0xFD, 0xB9,
	0xFD, 0xBB, 0xF6, 0xCF, 0xF6, 0xE7, 0x7E, 0x02, 0xB9, 0x02, 0xBB, 0x09, 0xCF, 0x09, 0xE7, 0x7E,
	0x00, 0xB6, 0x00, 0xEC, 0x7E, 0x03, 0xAA, 0x7E, 0xFC, 0xAA, 0x7F, 0x7E, 0xF3, 0xF3, 0x0C, 0xF3,
	0x18, 0xE7, 0x24, 0xF3, 0x24, 0x00, 0x30, 0x00, 0x30, 0xE7, 0x24, 0xDB, 0x24, 0xCF, 0x36, 0xC9,
	0x43, 0xAA, 0x36, 0xB0, 0x2A, 0xAA, 0x30, 0xB6, 0x24, 0xC3, 0x1E, 0xAA, 0x0C, 0x9E, 0x00, 0xB6,
	0xF3, 0x9E, 0xE1, 0xAA, 0x7E, 0xF3, 0xF3, 0xE7, 0xE7, 0xDB, 0xF3, 0xDB, 0x00, 0xCF, 0x00, 0xCF,
	0xE7, 0xDB, 0xDB, 0xDB, 0xCF, 0xC9, 0xC9, 0xBC, 0xAA, 0xC9, 0xB0, 0xD5, 0xAA, 0xCF, 0xB6, 0xDB,
	0xC3, 0xE1, 0xAA, 0x7E, 0xE7, 0xBC, 0x0C, 0xBC, 0x7E, 0x18, 0xBC, 0x0C, 0xBC, 0x7F, 0x7E, 0x00,
	0xD5, 0x12, 0xE1, 0x12, 0x00, 0x36, 0x00, 0x2A, 0xF9, 0x2A, 0xE1, 0x1E, 0xCF, 0x2A, 0xD5, 0x36,
	0xB6, 0x12, 0xAA, 0x06, 0xB6, 0x00, 0xAA, 0x7E, 0x00, 0xD5, 0xED, 0xE1, 0xED, 0x00, 0xC9, 0x00,
	0xD5, 0xF9, 0xD5, 0xE1, 0xE1, 0xCF, 0xD5, 0xD5, 0xC9, 0xB6, 0xED, 0xAA, 0xF9, 0xB6, 0x00, 0xAA,
	0x7E, 0x12, 0xAA, 0x14, 0xA4, 0x0C, 0xA2, 0x12, 0x98, 0x06, 0x9E, 0x7E, 0xED, 0xAA, 0xEB, 0xA4,
	0xF3, 0xA2, 0xED, 0x98, 0xF9, 0x9E, 0x06, 0x9E, 0x7E, 0x0A, 0xA4, 0x06, 0xA8, 0x7E, 0xF5, 0xA4,
	0xF9, 0xA8, 0x7F, 0x7E, 0x00, 0xDB, 0x00, 0x01, 0x18, 0x00, 0x0C, 0xF3, 0x0C, 0xCF, 0x18, 0xDB,
	0x18, 0xB6, 0x0C, 0xAA, 0x0C, 0x98, 0x00, 0x92, 0x7E, 0x00, 0x01, 0xE7, 0x00, 0xF3, 0xF3, 0xF3,
	0xCF, 0xE7, 0xDB, 0xE7, 0xB6, 0xF3, 0xAA, 0xF3, 0x98, 0x00, 0x92, 0x7E, 0x0C, 0xAA, 0x18, 0x9E,
	0x30, 0x9E, 0x55, 0xE7, 0x30, 0xE7, 0x18, 0xCF, 0x7E, 0xF3, 0xAA, 0xE7, 0x9E, 0xCF, 0x9E, 0xAA,
	0xE7, 0xCF, 0xE7, 0xE7, 0xCF, 0x7E, 0x06, 0x9E, 0x7E, 0xF9, 0x9E, 0x7E, 0x06, 0xA8, 0xF9, 0xA8,
	0x7F, 0x7E, 0xCE, 0x05, 0x32, 0x05, 0x32, 0xF9, 0xCE, 0xF9, 0xCE, 0x05, 0xBF, 0xFB, 0xBF, 0xEF,
	0xCE, 0xFB, 0x7E, 0x32, 0x05, 0x39, 0x01, 0x39, 0xF4, 0x32, 0xF9, 0x7E, 0xBF, 0xEF, 0xD3, 0xEA,
	0x39, 0xF4, 0x7F, 0x7E, 0xBA, 0x88, 0x46, 0x88, 0x28, 0x97, 0xD8, 0x97, 0xBA, 0x88, 0x7F, 0x7E,
	0xBA, 0x00, 0x46, 0x00, 0x28, 0xF1, 0xD8, 0xF1, 0xBA, 0x00, 0x7F, 0x7E, 0xEC, 0x88, 0xEC, 0x00,
	0x7E, 0x14, 0x88, 0x14, 0x00, 0x7E, 0xEC, 0x9C, 0x14, 0x9C, 0x7E, 0xEC, 0xB5, 0x14, 0xB5, 0x7E,
	0xEC, 0xD3, 0x14, 0xD3, 0x7E, 0xEC, 0xF1, 0x14, 0xF1, 0x7F, 0x7E, 0x00, 0x88, 0x00, 0x00, 0x7F
};

const byte SRC_OVERWORLD_MONSTER_DAMAGE[15] = {
	10, 5, 4, 3, 2, 1, 4, 6, 8, 10, 1, 2, 4, 6, 8
};

const char *const SRC_OVERWORLD_MONSTER_NAMES[15] = {
	"Ness creature", "Giant squid", "Dragon turtle", "Pirate ship", "Hood", "Bear", "Hidden archer",
	"Dark knight", "Evil trent", "Thief", "Orc", "Knight", "Necromancer", "Evil ranger", "Wandering warlock"
};
const char *const SRC_DUNGEON_MONSTER_NAMES[25] = {
	"Ranger", "Skeleton", "Thief", "Giant rat", "Bat", "Spider", "Viper", "Orc", "Cyclops", "Gelatinous cube",
	"Ettin", "Chest", "Lizard man", "Minatour", "Carrion creeper", "Tangler", "Gremlin", "Wandering eyes",
	"Wraith", "Lich", "Invisible seeker", "Mind whipper", "Zorn", "Daemon", "Balron"
};

const char *const SRC_BLOCKED = "Blocked!";
const char *const SRC_ENTER_QUESTION = "Enter?";
const char *const SRC_ENTERING = "Entering...";
const char *const SRC_THE_CITY_OF = "The city of ";
const char *const SRC_DUNGEON_LEVEL = " Level    ";
const char *const SRC_PASS = "Pass";
const char *const SRC_HUH = "Huh?";
const char *const SRC_ATTACKED_BY = "Attacked by %s!";
const char *const SRC_ARMOR_DESTROYED = "Armor destroyed!";
const char *const SRC_GREMLIN_STOLE = "A gremlin stole some food!";
const char *const SRC_MENTAL_ATTACK = "Mental attack!";
const char *const SRC_MISSED = "Missed!";
const char *const SRC_THIEF_STOLE = "Thief stole %s %s";
const char *const SRC_A = "a";
const char *const SRC_AN = "an";
const char *const SRC_HIT = "Hit!";
const char *const SRC_ATTACKS = "attacks!";
const char *const SRC_DAMAGE = "damage";
const char *const SRC_BARD_SPEECH1 = "Iolo the Bard sings:";
const char *const SRC_BARD_SPEECH2 = "Ho eyoh he hum!";
const char *const SRC_JESTER_SPEECH1 = "Gwino the jester sings:";
const char *const SRC_JESTER_SPEECH2 = "I've got the key!";
const char *const SRC_BARD_STOLEN = "Iolo stole something!";
const char *const SRC_JESTER_STOLEN = "The jester stole something!";


/*-------------------------------------------------------------------*/

GameResources::GameResources() : LocalResourceFile("ULTIMA1/DATA") {
} 

GameResources::GameResources(Shared::Resources *resManager) : LocalResourceFile(resManager, "ULTIMA1/DATA") {
	Common::copy(SRC_TITLE_MESSAGES, SRC_TITLE_MESSAGES + 13, TITLE_MESSAGES);
	Common::copy(SRC_MAIN_MENU_TEXT, SRC_MAIN_MENU_TEXT + 7, MAIN_MENU_TEXT);
	Common::copy(SRC_STATUS_TEXT, SRC_STATUS_TEXT + 4, STATUS_TEXT);
	Common::copy(SRC_DIRECTION_NAMES, SRC_DIRECTION_NAMES + 4, DIRECTION_NAMES);
	Common::copy(SRC_DUNGEON_MOVES, SRC_DUNGEON_MOVES + 4, DUNGEON_MOVES);
	Common::copy(SRC_LOCATION_NAMES, SRC_LOCATION_NAMES + 85, LOCATION_NAMES);
	Common::copy(SRC_LOCATION_X, SRC_LOCATION_X + 84, LOCATION_X);
	Common::copy(SRC_LOCATION_Y, SRC_LOCATION_Y + 84, LOCATION_Y);
	Common::copy(&SRC_LOCATION_PEOPLE[0][0], &SRC_LOCATION_PEOPLE[0][0] + 150 * 4, &LOCATION_PEOPLE[0][0]);
	Common::copy(&SRC_DUNGEON_DRAW_DATA[0], &SRC_DUNGEON_DRAW_DATA[1964], DUNGEON_DRAW_DATA);
	Common::copy(&SRC_DUNGEON_ITEM_NAMES[0], &SRC_DUNGEON_ITEM_NAMES[2], DUNGEON_ITEM_NAMES);
	Common::copy(&SRC_WEAPON_NAMES_UPPERCASE[0], &SRC_WEAPON_NAMES_UPPERCASE[16], WEAPON_NAMES_UPPERCASE);
	Common::copy(&SRC_WEAPON_NAMES_LOWERCASE[0], &SRC_WEAPON_NAMES_LOWERCASE[16], WEAPON_NAMES_LOWERCASE);
	Common::copy(&SRC_ARMOR_NAMES[0], &SRC_ARMOR_NAMES[16], ARMOR_NAMES);
	Common::copy(&SRC_SPELL_NAMES[0], &SRC_SPELL_NAMES[16], SPELL_NAMES);
	Common::copy(&SRC_OVERWORLD_MONSTER_DAMAGE[0], &SRC_OVERWORLD_MONSTER_DAMAGE[15], OVERWORLD_MONSTER_DAMAGE);
	Common::copy(&SRC_OVERWORLD_MONSTER_NAMES[0], &SRC_OVERWORLD_MONSTER_NAMES[15], OVERWORLD_MONSTER_NAMES);
	Common::copy(&SRC_DUNGEON_MONSTER_NAMES[0], &SRC_DUNGEON_MONSTER_NAMES[25], DUNGEON_MONSTER_NAMES);

	BLOCKED = SRC_BLOCKED;
	ENTER_QUESTION = SRC_ENTER_QUESTION;
	ENTERING = SRC_ENTERING;
	THE_CITY_OF = SRC_THE_CITY_OF;
	DUNGEON_LEVEL = SRC_DUNGEON_LEVEL;
	PASS = SRC_PASS;
	HUH = SRC_HUH;
	ATTACKED_BY = SRC_ATTACKED_BY;
	ARMOR_DESTROYED = SRC_ARMOR_DESTROYED;
	GREMLIN_STOLE = SRC_GREMLIN_STOLE;
	MENTAL_ATTACK = SRC_MENTAL_ATTACK;
	MISSED = SRC_MISSED;
	THIEF_STOLE = SRC_THIEF_STOLE;
	A = SRC_A;
	AN = SRC_AN;
	HIT = SRC_HIT;
	ATTACKS = SRC_ATTACKS;
	DAMAGE = SRC_DAMAGE;
	BARD_SPEECH1 = SRC_BARD_SPEECH1;
	BARD_SPEECH2 = SRC_BARD_SPEECH2;
	JESTER_SPEECH1 = SRC_JESTER_SPEECH1;
	JESTER_SPEECH2 = SRC_JESTER_SPEECH2;
	BARD_STOLEN = SRC_BARD_STOLEN;
	JESTER_STOLEN = SRC_JESTER_STOLEN;
}

void GameResources::synchronize() {
	syncStrings(TITLE_MESSAGES, 13);
	syncStrings(MAIN_MENU_TEXT, 7);
	syncStrings(STATUS_TEXT, 4);
	syncStrings(DIRECTION_NAMES, 4);
	syncStrings(DUNGEON_MOVES, 4);
	syncStrings(LOCATION_NAMES, LOCATION_COUNT);
	syncBytes(LOCATION_X, 84);
	syncBytes(LOCATION_Y, 84);
	syncNumbers2D((int *)LOCATION_PEOPLE, 150, 4);
	syncBytes(DUNGEON_DRAW_DATA, 1964);
	syncStrings(DUNGEON_ITEM_NAMES, 2);
	syncStrings(WEAPON_NAMES_UPPERCASE, 16);
	syncStrings(WEAPON_NAMES_LOWERCASE, 16);
	syncStrings(ARMOR_NAMES, 6);
	syncStrings(SPELL_NAMES, 11);
	syncBytes(OVERWORLD_MONSTER_DAMAGE, 15);
	syncStrings(OVERWORLD_MONSTER_NAMES, 15);
	syncStrings(DUNGEON_MONSTER_NAMES, 25);

	syncString(BLOCKED);
	syncString(ENTER_QUESTION);
	syncString(ENTERING);
	syncString(THE_CITY_OF);
	syncString(DUNGEON_LEVEL);
	syncString(PASS);
	syncString(HUH);
	syncString(ATTACKED_BY);
	syncString(ARMOR_DESTROYED);
	syncString(GREMLIN_STOLE);
	syncString(MENTAL_ATTACK);
	syncString(MISSED);
	syncString(THIEF_STOLE);
	syncString(A);
	syncString(AN);
	syncString(HIT);
	syncString(ATTACKS);
	syncString(DAMAGE);
	syncString(BARD_SPEECH1);
	syncString(BARD_SPEECH2);
	syncString(JESTER_SPEECH1);
	syncString(JESTER_SPEECH2);
}

} // End of namespace Ultima1
} // End of namespace Ultima
