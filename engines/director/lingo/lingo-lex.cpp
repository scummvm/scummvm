#line 2 "engines/director/lingo/lingo-lex.cpp"

#line 4 "engines/director/lingo/lingo-lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[274] =
    {   0,
        0,    0,   75,   73,    4,   71,   71,   73,   73,   73,
       70,   70,   70,   69,   70,   70,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   73,    3,    3,    4,   71,    0,
        0,    0,    0,    0,   72,    5,   66,    2,   68,   69,
       65,   63,   64,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   23,   13,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   36,   37,   67,
       39,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       56,   67,   67,   67,    1,    3,    3,    0,    5,    2,

       68,   67,    7,   67,   67,   67,   67,   67,   67,   17,
       67,   67,   67,   67,    0,   67,   67,   67,   67,   67,
       67,   67,   32,   67,   67,   35,   67,   67,   67,   67,
       44,   67,   46,   67,   67,   67,   67,   67,   67,   67,
       67,    0,   67,   67,    9,   67,   11,   12,   16,    0,
       17,   19,   67,   67,   67,    0,   67,   67,   26,   27,
       28,   29,   67,   67,   67,   34,   38,   40,   67,   67,
       67,   67,   67,   48,    0,   54,   60,   67,   58,   62,
       15,    6,   67,   67,   17,   17,   67,   20,   67,   22,
       67,   67,   30,   67,   33,   67,   67,   67,   67,   67,

       67,   53,   53,   53,   55,   61,   67,    0,    8,   67,
       17,   67,   21,   67,   67,   31,   67,   67,   67,   45,
       57,   47,    0,    0,   53,   53,   59,    0,   67,   18,
       67,   67,   67,   67,   67,    0,    0,    0,    0,   53,
       53,   14,   10,   24,   67,   67,   42,   43,    0,    0,
        0,   53,   53,   67,   41,    0,    0,    0,    0,    0,
       25,   52,   51,   52,    0,    0,    0,    0,    0,    0,
       49,   50,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    9,    1,    8,
        8,    8,   10,    8,   11,   12,    8,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    8,    1,   14,
       15,   16,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   26,
        8,    1,    8,    8,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   26,   26,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   65,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[285] =
    {   0,
        0,   64,  188,  702,   68,   72,   76,   80,  148,    0,
      702,  129,  106,   55,   71,   95,   66,   68,   66,   62,
       72,   88,   73,    0,  104,   82,  120,  110,  136,  119,
       83,  113,  154,  156,  105,  192,  209,  213,  702,  217,
      180,  225,  120,  100,  702,    0,  702,    0,   89,  130,
      702,  702,  702,    0,  114,  108,  155,  181,  178,  195,
      191,  189,  210,  217,  220,  202,   89,    0,  205,  220,
      214,  214,  226,  215,  232,  212,  219,    0,    0,  226,
        0,  238,  252,  224,  234,  241,  246,  267,  254,  264,
        0,  265,  253,  259,  702,  292,  315,  265,    0,    0,

       85,  280,    0,  274,  274,  273,  281,  284,  293,  320,
      286,  289,  301,  312,  333,  299,  319,  308,  320,  312,
      313,  320,    0,  322,  315,    0,  322,  312,  317,  325,
        0,  336,    0,  334,  328,  335,  385,  335,  344,  353,
      359,  360,  350,  356,    0,  374,    0,    0,    0,  185,
        0,    0,  363,  373,  379,  368,  382,  368,    0,    0,
        0,    0,  373,  375,  387,    0,    0,  392,  385,  390,
      395,  380,  383,    0,  418,  157,    0,  405,  403,    0,
      395,    0,  409,  406,    0,    0,  407,    0,  414,  702,
      414,  410,    0,  412,    0,  427,  418,  416,  415,  433,

      424,  473,  475,  479,  456,    0,  433,  488,    0,  434,
        0,  430,    0,  447,  474,    0,  477,  452,  463,    0,
        0,    0,  495,  483,  497,  499,    0,  486,  471,    0,
      493,  497,  498,  476,  483,  522,  509,  514,  512,  543,
      555,  702,    0,    0,  508,  519,    0,    0,  515,  561,
      530,  567,  578,  534,    0,  538,  584,  550,  589,  593,
        0,  702,  595,  702,  599,  559,  603,  563,  610,  615,
      616,  620,  702,  657,  659,  662,  665,  671,  676,  681,
      684,  689,  691,  696
    } ;

static yyconst flex_int16_t yy_def[285] =
    {   0,
      273,    1,  273,  273,  273,  273,  273,  273,  274,  275,
      273,  273,  273,  273,  273,  273,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  274,  273,  277,  273,  278,  273,  273,
      273,  273,  273,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  273,  273,  273,  273,  277,  278,

      273,  276,  276,  276,  276,  276,  276,  276,  276,  279,
      276,  276,  276,  276,  273,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  273,  276,  276,  276,  276,  276,  276,  276,  280,
      281,  276,  276,  276,  276,  273,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  282,  276,  276,  276,  276,  276,
      273,  276,  276,  276,  283,  281,  276,  276,  276,  273,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  282,  282,  282,  273,  276,  276,  273,  276,  276,
      283,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  273,  273,  282,  282,  276,  273,  276,  276,
      276,  276,  276,  276,  276,  273,  273,  273,  273,  282,
      282,  273,  276,  276,  276,  276,  276,  276,  273,  273,
      273,  282,  282,  276,  276,  273,  284,  273,  273,  273,
      276,  273,  284,  273,  273,  273,  273,  273,  273,  273,
      284,  284,    0,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273
    } ;

static yyconst flex_int16_t yy_nxt[768] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   11,
       13,    4,   14,   15,   11,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   24,   26,   27,   28,   29,
       30,   24,   31,   32,   33,   24,   24,   34,   24,   24,
       24,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   24,   31,   32,   33,   24,
       24,   34,   24,   24,   35,   36,   49,   50,   37,   38,
       39,   39,   40,   41,   42,   42,   41,   41,   42,   42,
       41,   40,   39,   39,   40,   51,   52,   55,   57,   58,
      115,   60,   43,  115,   56,   59,   43,  101,   61,   66,

       62,  101,   67,   85,   64,   45,   71,   95,   95,   53,
       63,   72,   55,   57,   58,   60,   48,   43,   56,   59,
       65,   43,   61,   66,   62,   68,   67,  103,   85,   64,
       76,   71,   69,   86,   63,   72,   73,   47,   70,   77,
       74,   49,   50,   87,   65,   82,   98,   88,  102,   75,
       68,   83,  103,   45,   84,   76,   69,   78,   86,  205,
      205,   73,   70,   77,   79,   74,   80,   87,   81,   82,
       98,   88,  102,   75,   89,   83,  104,   90,   84,   92,
       93,   41,   78,   91,   41,   94,  150,  273,   79,  150,
       80,  273,   81,   96,   39,   39,   97,  105,  273,   89,

       43,  104,   90,  273,   92,   93,  106,   91,  110,   94,
       97,   39,   39,   97,   38,   39,   39,   40,   40,   39,
       39,   40,  105,  107,  109,   43,   41,   42,   42,   41,
      106,  114,  108,  110,  111,  112,  113,  273,  116,  117,
      118,  273,  119,  120,  121,   43,  127,  107,  109,  122,
      125,  123,  273,  126,  128,  114,  108,  273,  131,  111,
      112,  113,  116,  117,  132,  118,  119,  120,  124,  121,
       43,  127,  129,  122,  125,  133,  123,  126,  134,  128,
      136,  130,  131,  135,  137,  138,  273,  140,  132,  139,
      273,  141,  124,   96,   39,   39,   97,  129,  142,  133,

      143,  147,  134,  144,  136,  130,  145,  146,  135,  137,
      138,  140,  148,  149,  139,  141,   97,   39,   39,   97,
      152,  150,  142,  153,  150,  143,  147,  144,  154,  155,
      145,  146,   54,  157,  115,  160,  148,  115,  149,  158,
      161,  273,  162,  164,  152,  163,  165,  153,  159,  166,
      167,  168,  154,  169,  155,  170,  171,  157,  172,  160,
      173,  174,  273,  177,  158,  161,  162,  156,  164,  163,
      178,  165,  159,  166,  167,  168,  179,  169,  180,  170,
      181,  171,  182,  172,  173,  174,  175,  177,  183,  175,
      184,  156,  187,  188,  178,  189,  208,  190,  191,  208,

      192,  179,  193,  180,  194,  181,  182,  195,  196,  197,
      198,  199,  183,  176,  200,  184,  187,  201,  188,  175,
      189,  190,  175,  191,  192,  206,  193,  207,  194,  209,
      210,  216,  195,  196,  197,  198,  199,  176,  200,  212,
      213,  201,  214,  215,  203,  217,  273,  218,  219,  220,
      206,  204,  207,  221,  209,  210,  216,  222,  205,  205,
      273,  227,  229,  212,  213,  231,  214,  215,  203,  230,
      217,  218,  219,  220,  223,  204,  223,  223,  221,  223,
      223,  222,  224,  223,  224,  227,  229,  234,  224,  208,
      231,  225,  208,  230,  232,  233,  236,  235,  223,  236,

      223,  223,  237,  223,  243,  273,  224,  242,  224,  247,
      226,  234,  228,  244,  237,  245,  225,  239,  246,  232,
      233,  235,  248,  236,  238,  249,  236,  237,  243,  239,
      240,  241,  242,  247,  226,  250,  251,  228,  244,  237,
      245,  239,  254,  246,  223,  255,  248,  223,  238,  256,
      249,  238,  224,  239,  240,  241,  223,  258,  262,  223,
      250,  251,  257,  273,  224,  257,  254,  261,  259,  255,
      264,  259,  273,  256,  273,  238,  224,  252,  273,  260,
      269,  258,  260,  262,  270,  257,  273,  224,  257,  253,
      265,  261,  273,  265,  267,  264,  273,  267,  273,  273,

      265,  252,  273,  265,  267,  269,  273,  267,  237,  270,
      273,  271,  237,  253,  271,  273,  272,  271,  266,  272,
      271,  272,  268,  239,  272,  273,  273,  239,  266,  273,
      273,  273,  268,  237,  273,  273,  273,  237,  273,  273,
      273,  273,  266,  273,  273,  273,  268,  239,  273,  273,
      273,  239,  266,  273,  273,  273,  268,   44,   44,  273,
       44,   44,   44,   46,   46,   54,   54,   54,   99,   99,
       99,  100,  100,  273,  100,  100,  100,  151,  273,  151,
      151,  151,  185,  273,  273,  185,  185,  186,  186,  186,
      202,  273,  273,  202,  211,  211,  211,  263,  273,  273,

      263,    3,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273
    } ;

static yyconst flex_int16_t yy_chk[768] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   14,   14,    2,    5,
        5,    5,    5,    6,    6,    6,    6,    7,    7,    7,
        7,    8,    8,    8,    8,   15,   15,   17,   18,   19,
       67,   20,    6,   67,   17,   19,    7,  101,   21,   23,

       21,   49,   23,   31,   22,   44,   26,   35,   35,   16,
       21,   26,   17,   18,   19,   20,   13,    6,   17,   19,
       22,    7,   21,   23,   21,   25,   23,   56,   31,   22,
       28,   26,   25,   32,   21,   26,   27,   12,   25,   28,
       27,   50,   50,   32,   22,   30,   43,   32,   55,   27,
       25,   30,   56,    9,   30,   28,   25,   29,   32,  176,
      176,   27,   25,   28,   29,   27,   29,   32,   29,   30,
       43,   32,   55,   27,   33,   30,   57,   33,   30,   34,
       34,   41,   29,   33,   41,   34,  150,    3,   29,  150,
       29,    0,   29,   36,   36,   36,   36,   58,    0,   33,

       41,   57,   33,    0,   34,   34,   59,   33,   62,   34,
       37,   37,   37,   37,   38,   38,   38,   38,   40,   40,
       40,   40,   58,   60,   61,   41,   42,   42,   42,   42,
       59,   66,   60,   62,   63,   64,   65,    0,   69,   69,
       70,    0,   71,   72,   73,   42,   80,   60,   61,   74,
       76,   75,    0,   77,   82,   66,   60,    0,   84,   63,
       64,   65,   69,   69,   85,   70,   71,   72,   75,   73,
       42,   80,   83,   74,   76,   86,   75,   77,   87,   82,
       89,   83,   84,   88,   90,   92,    0,   93,   85,   92,
        0,   94,   75,   96,   96,   96,   96,   83,   98,   86,

      102,  107,   87,  104,   89,   83,  105,  106,   88,   90,
       92,   93,  108,  109,   92,   94,   97,   97,   97,   97,
      111,  110,   98,  112,  110,  102,  107,  104,  113,  114,
      105,  106,  110,  116,  115,  118,  108,  115,  109,  117,
      119,    0,  120,  122,  111,  121,  124,  112,  117,  125,
      127,  128,  113,  129,  114,  130,  132,  116,  134,  118,
      135,  136,    0,  138,  117,  119,  120,  115,  122,  121,
      139,  124,  117,  125,  127,  128,  140,  129,  141,  130,
      142,  132,  143,  134,  135,  136,  137,  138,  144,  137,
      146,  115,  153,  154,  139,  155,  181,  156,  157,  181,

      158,  140,  163,  141,  164,  142,  143,  165,  168,  169,
      170,  171,  144,  137,  172,  146,  153,  173,  154,  175,
      155,  156,  175,  157,  158,  178,  163,  179,  164,  183,
      184,  194,  165,  168,  169,  170,  171,  137,  172,  187,
      189,  173,  191,  192,  175,  196,    0,  197,  198,  199,
      178,  175,  179,  200,  183,  184,  194,  201,  205,  205,
        0,  207,  210,  187,  189,  214,  191,  192,  175,  212,
      196,  197,  198,  199,  202,  175,  203,  202,  200,  203,
      204,  201,  202,  204,  203,  207,  210,  218,  204,  208,
      214,  203,  208,  212,  215,  217,  223,  219,  225,  223,

      226,  225,  224,  226,  229,    0,  225,  228,  226,  234,
      204,  218,  208,  231,  223,  232,  203,  224,  233,  215,
      217,  219,  235,  236,  223,  237,  236,  224,  229,  223,
      225,  226,  228,  234,  204,  238,  239,  208,  231,  223,
      232,  224,  245,  233,  240,  246,  235,  240,  223,  249,
      237,  236,  240,  223,  225,  226,  241,  251,  256,  241,
      238,  239,  250,    0,  241,  250,  245,  254,  252,  246,
      258,  252,    0,  249,    0,  236,  252,  240,    0,  253,
      266,  251,  253,  256,  268,  257,    0,  253,  257,  241,
      259,  254,    0,  259,  260,  258,  263,  260,    0,  263,

      265,  240,    0,  265,  267,  266,    0,  267,  259,  268,
        0,  269,  260,  241,  269,    0,  270,  271,  259,  270,
      271,  272,  260,  259,  272,    0,    0,  260,  265,    0,
        0,    0,  267,  259,    0,    0,    0,  260,    0,    0,
        0,    0,  259,    0,    0,    0,  260,  259,    0,    0,
        0,  260,  265,    0,    0,    0,  267,  274,  274,    0,
      274,  274,  274,  275,  275,  276,  276,  276,  277,  277,
      277,  278,  278,    0,  278,  278,  278,  279,    0,  279,
      279,  279,  280,    0,    0,  280,  280,  281,  281,  281,
      282,    0,    0,  282,  283,  283,  283,  284,    0,    0,

      284,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "engines/director/lingo/lingo-lex.l"
/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */
#define YY_NO_INPUT 1
#line 29 "engines/director/lingo/lingo-lex.l"

#define YY_NO_UNISTD_H
#define FORBIDDEN_SYMBOL_ALLOW_ALL

#include "common/str.h"

#include "director/lingo/lingo.h"
#include "director/lingo/lingo-gr.h"

using namespace Director;

int yyparse();
static void count() {
	if (debugChannelSet(-1, kDebugLingoParse))
		debug("LEXER: Read '%s' at %d:%d", yytext, g_lingo->_linenumber, g_lingo->_colnumber);

	g_lingo->_colnumber += strlen(yytext);
}

static void countnl() {
	char *p = yytext;

	while(*p == '\n' || *p == '\r')
		p++;

	g_lingo->_linenumber++;
	g_lingo->_colnumber = strlen(p);
}

static int checkImmediate(int token) {
	if (g_lingo->_immediateMode) {
		yylval.s = new Common::String(yytext);

		return ID;
	}

	return token;
}

#line 777 "engines/director/lingo/lingo-lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 78 "engines/director/lingo/lingo-lex.l"


#line 963 "engines/director/lingo/lingo-lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 274 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 273 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 80 "engines/director/lingo/lingo-lex.l"
{ g_lingo->_linenumber++; g_lingo->_colnumber = 0; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "engines/director/lingo/lingo-lex.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 82 "engines/director/lingo/lingo-lex.l"
{ count(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 83 "engines/director/lingo/lingo-lex.l"
{ count(); return ' '; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 85 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(yytext); return SYMBOL; }	// D3
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "engines/director/lingo/lingo-lex.l"
{ count(); return tAFTER; }		// D3
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "engines/director/lingo/lingo-lex.l"
{ count(); return tAND; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "engines/director/lingo/lingo-lex.l"
{ count(); return tBEFORE; }	// D3
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "engines/director/lingo/lingo-lex.l"
{ count(); return tCHAR; }		// D3
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "engines/director/lingo/lingo-lex.l"
{ count(); return tCONTAINS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "engines/director/lingo/lingo-lex.l"
{ count(); return tDONE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "engines/director/lingo/lingo-lex.l"
{ count(); return tDOWN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "engines/director/lingo/lingo-lex.l"
{ count(); return tIF; }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 95 "engines/director/lingo/lingo-lex.l"
{ countnl(); return tNLELSIF; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 96 "engines/director/lingo/lingo-lex.l"
{ countnl(); return tNLELSE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "engines/director/lingo/lingo-lex.l"
{ count(); return tELSE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 98 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'end '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		yylval.s = new Common::String(ptr);

		return ENDCLAUSE;
	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "engines/director/lingo/lingo-lex.l"
{ count(); return tFACTORY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "engines/director/lingo/lingo-lex.l"
{ count(); return tEXIT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "engines/director/lingo/lingo-lex.l"
{ count(); return tFRAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "engines/director/lingo/lingo-lex.l"
{ count(); return tGLOBAL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "engines/director/lingo/lingo-lex.l"
{ count(); return tGO; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "engines/director/lingo/lingo-lex.l"
{ count(); return tGO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "engines/director/lingo/lingo-lex.l"
{ count(); return tINSTANCE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "engines/director/lingo/lingo-lex.l"
{ count(); return tINTERSECTS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "engines/director/lingo/lingo-lex.l"
{ count(); return tINTO; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "engines/director/lingo/lingo-lex.l"
{ count(); return tITEM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "engines/director/lingo/lingo-lex.l"
{ count(); return tLINE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "engines/director/lingo/lingo-lex.l"
{ count(); return checkImmediate(tLOOP); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "engines/director/lingo/lingo-lex.l"
{ count(); return tMACRO; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "engines/director/lingo/lingo-lex.l"
{ count(); return tMETHOD; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "engines/director/lingo/lingo-lex.l"
{ count(); return tMOD; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "engines/director/lingo/lingo-lex.l"
{ count(); return tMOVIE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "engines/director/lingo/lingo-lex.l"
{ count(); return tNEXT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "engines/director/lingo/lingo-lex.l"
{ count(); return tNOT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "engines/director/lingo/lingo-lex.l"
{ count(); return tOF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "engines/director/lingo/lingo-lex.l"
{ count(); return tON; }		// D3
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 129 "engines/director/lingo/lingo-lex.l"
{ count(); return tOPEN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 130 "engines/director/lingo/lingo-lex.l"
{ count(); return tOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 131 "engines/director/lingo/lingo-lex.l"
{ count(); return tPLAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 132 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(yytext); return tPLAYACCEL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 133 "engines/director/lingo/lingo-lex.l"
{ count(); return tPREVIOUS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 134 "engines/director/lingo/lingo-lex.l"
{ count(); return tPROPERTY; }	// D4
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 135 "engines/director/lingo/lingo-lex.l"
{ count(); return tPUT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 136 "engines/director/lingo/lingo-lex.l"
{ count(); return checkImmediate(tREPEAT); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 137 "engines/director/lingo/lingo-lex.l"
{ count(); return tSET; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 138 "engines/director/lingo/lingo-lex.l"
{ count(); return tSTARTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 139 "engines/director/lingo/lingo-lex.l"
{ count(); return tTELL; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 140 "engines/director/lingo/lingo-lex.l"
{
		count();

		yylval.e[0] = g_lingo->_theEntities["last"]->entity;
		yylval.e[1] = 0;	// No field

		return THEENTITYWITHID;
	}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 148 "engines/director/lingo/lingo-lex.l"
{
		count();

		yylval.e[0] = g_lingo->_theEntities["sqrt"]->entity;
		yylval.e[1] = 0;	// No field

		return THEENTITYWITHID;
	}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 156 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		ptr += 3; // Skip 'of '

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (g_lingo->_theEntities.contains(ptr)) {
			field = Common::String::format("%d%s", g_lingo->_theEntities[ptr]->entity, field.c_str());

			if (!g_lingo->_theEntityFields.contains(field)) {
				error("Unhandled the field %s", ptr);
			}

			if (g_lingo->_theEntityFields[field]->entity != g_lingo->_theEntities[ptr]->entity)
				error("Unsupported field '%s' for entity '%s'", field.c_str(), ptr);

			yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
			yylval.e[1] = g_lingo->_theEntityFields[field]->field;

			if (g_lingo->_theEntities[ptr]->hasId)
				return THEENTITYWITHID;
			else
				return THEENTITY;
		}

		warning("Unhandled the entity %s", ptr);
	}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 196 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		field = Common::String::format("%d%s", g_lingo->_theEntities[ptr]->entity, field.c_str());

		if (!g_lingo->_theEntityFields.contains(field)) {
			error("Unhandled the field %s", ptr);
		}

		if (g_lingo->_theEntityFields[field]->entity != g_lingo->_theEntities[ptr]->entity)
			error("Unsupported field '%s' for entity '%s'", field.c_str(), ptr);

		yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
		yylval.e[1] = g_lingo->_theEntityFields[field]->field;

		if (g_lingo->_theEntities[ptr]->hasId)
			return THEENTITYWITHID;
		else
			return THEENTITY;
	}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 227 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (g_lingo->_theEntities.contains(ptr)) {
			yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
			yylval.e[1] = 0;	// No field

			if (g_lingo->_theEntities[ptr]->hasId)
				return THEENTITYWITHID;
			else
				return THEENTITY;
		}

		warning("Unhandled the entity %s", ptr);
	}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 246 "engines/director/lingo/lingo-lex.l"
{ count(); return tTHEN; }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 247 "engines/director/lingo/lingo-lex.l"
{ count(); return tTHENNL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 248 "engines/director/lingo/lingo-lex.l"
{ count(); return tTO; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 249 "engines/director/lingo/lingo-lex.l"
{ count(); return tSPRITE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 250 "engines/director/lingo/lingo-lex.l"
{ count(); return tWITH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 251 "engines/director/lingo/lingo-lex.l"
{ count(); return tWITHIN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 252 "engines/director/lingo/lingo-lex.l"
{ count(); return tWHEN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 253 "engines/director/lingo/lingo-lex.l"
{ count(); return tWHILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 254 "engines/director/lingo/lingo-lex.l"
{ count(); return tWORD; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 256 "engines/director/lingo/lingo-lex.l"
{ count(); return tNEQ; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 257 "engines/director/lingo/lingo-lex.l"
{ count(); return tGE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 258 "engines/director/lingo/lingo-lex.l"
{ count(); return tLE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 259 "engines/director/lingo/lingo-lex.l"
{ count(); return tCONCAT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 261 "engines/director/lingo/lingo-lex.l"
{
		count();
		yylval.s = new Common::String(yytext);

		if (g_lingo->_ignoreMe && yylval.s->equalsIgnoreCase("me"))
			return ID;

		if (g_lingo->_twoWordBuiltins.contains(yytext))
			return TWOWORDBUILTIN;

		// Special treatment of 'me'. First parameter is method name
		if (!g_lingo->_currentFactory.empty()) {
			if (yylval.s->equalsIgnoreCase("me"))
				return tME;
		}

		if (g_lingo->_builtins.contains(yytext)) {
			int type = g_lingo->_builtins[yytext]->type;
			if ((type == BLTIN || type == FBLTIN || type == RBLTIN) && g_lingo->_builtins[yytext]->parens == false) {
				if (type == RBLTIN) {
					if (g_lingo->_builtins[yytext]->nargs != 1 || g_lingo->_builtins[yytext]->maxArgs != 1)
						error("Incorrectly set RBLTIN %s", yytext);

					return RBLTINONEARG;
				}
				if (g_lingo->_builtins[yytext]->nargs == 0) {
					if (g_lingo->_builtins[yytext]->maxArgs == 0)
						return type == BLTIN ? BLTINNOARGS : FBLTINNOARGS;
					else if (g_lingo->_builtins[yytext]->maxArgs == 1)
						return BLTINNOARGSORONE;
					else
						return type == BLTIN ? BLTINARGLIST : FBLTINARGLIST;
				} else if (g_lingo->_builtins[yytext]->nargs == 1 &&
							g_lingo->_builtins[yytext]->maxArgs == 1) {
					return type == BLTIN ? BLTINONEARG : FBLTINONEARG;
				} else if (g_lingo->_builtins[yytext]->nargs == -1) {
					return type == BLTIN ? BLTINARGLIST : FBLTINARGLIST;
				} else {
					return type == BLTIN ? BLTINARGLIST : FBLTINARGLIST;
				}
			}
		}

		return ID;
	}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 306 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.f = atof(yytext); return FLOAT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 307 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.i = strtol(yytext, NULL, 10); return INT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 308 "engines/director/lingo/lingo-lex.l"
{ count(); return *yytext; }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 309 "engines/director/lingo/lingo-lex.l"
{ return '\n'; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 310 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(&yytext[1]); yylval.s->deleteLastChar(); return STRING; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 311 "engines/director/lingo/lingo-lex.l"
{ count(); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 313 "engines/director/lingo/lingo-lex.l"
ECHO;
	YY_BREAK
#line 1573 "engines/director/lingo/lingo-lex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 274 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 274 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 273);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 313 "engines/director/lingo/lingo-lex.l"



extern int yydebug;

namespace Director {

int Lingo::parse(const char *code) {
	YY_BUFFER_STATE bp;

	if (debugChannelSet(-1, kDebugLingoParse))
		yydebug = 1;
	else
		yydebug = 0;

	yy_delete_buffer(YY_CURRENT_BUFFER);

	bp = yy_scan_string(code);
	yy_switch_to_buffer(bp);
	yyparse();
	yy_delete_buffer(bp);

	return 0;
}

}

