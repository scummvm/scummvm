#line 2 "engines/director/lingo/lingo-lex.cpp"

#line 4 "engines/director/lingo/lingo-lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[366] =
    {   0,
        0,    0,   79,   77,    4,   75,   75,   77,   77,   77,
       74,   74,   74,   73,   74,   70,   74,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   77,    3,    3,   71,    4,   75,
        0,    0,    0,   76,    5,   69,    2,   72,   73,   68,
       66,   67,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   22,   13,   26,   71,   71,   71,   71,
       71,   71,   71,   71,   36,   37,   71,   39,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   59,   71,
       71,   71,    1,    3,    3,    0,   71,    5,    2,   72,

       71,    7,   71,   71,   71,   71,   71,   71,   16,   71,
       71,    0,   71,   71,   71,   71,   71,   71,   71,   32,
       71,   71,   35,   71,   71,   71,   71,   45,   71,   47,
       71,   71,   71,   71,   71,   71,   71,   71,   71,    0,
       71,   71,   71,    9,   71,   11,   12,   15,    0,   18,
       71,    0,   71,   71,   25,   27,   28,   29,   71,   71,
       71,   34,   38,   41,   71,   71,   71,   71,   71,   71,
       50,    0,   58,   63,   71,   61,   65,    0,   71,    6,
       71,   71,    0,   16,   71,   21,   71,   71,   30,   71,
       33,    0,   71,   71,   71,   71,   71,   71,   71,   57,

       57,   57,   57,   57,   64,   71,    0,   71,    8,   71,
        0,   16,   19,    0,   71,   71,   71,    0,   71,   71,
       71,   46,    0,   60,   49,    0,    0,   57,   57,   57,
       57,   62,    0,   71,   71,   14,    0,   71,   71,    0,
       31,    0,   71,   71,   71,    0,    0,    0,    0,    0,
        0,    0,    0,   57,   57,   57,   57,    0,   17,   10,
        0,   23,   71,   31,   31,    0,   71,   43,   44,    0,
        0,    0,    0,    0,    0,    0,   57,   57,   57,   57,
       17,    0,   71,   31,    0,   42,    0,    0,    0,    0,
        0,    0,    0,    0,   57,    0,   57,    0,   24,   40,

        0,    0,    0,   48,   56,   55,   56,    0,    0,    0,
        0,   57,    0,    0,    0,   20,   48,    0,    0,    0,
       55,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
        0,   48,    0,    0,    0,   56,   55,   55,   56,    0,
       52,   48,   54,   55,   55,    0,   55,    0,   55,    0,
        0,    0,    0,   53,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    8,    9,    1,    8,
        8,    8,   10,    8,   11,   12,    8,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    8,    1,   14,
       15,   16,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   26,
        8,    1,    8,    8,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   26,   26,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   65,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    1,
        1,    1,    4,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1
    } ;

static yyconst flex_int16_t yy_base[383] =
    {   0,
        0,   64,  240,  981,   68,  981,  981,   72,  180,    0,
      981,  164,  140,   55,   63,  981,  130,   59,   59,   59,
       55,   63,    0,   64,   75,   70,  100,   77,  110,  102,
       98,  139,  126,  152,  145,  185,  206,  110,  210,  981,
      214,  175,   97,  981,    0,  981,    0,   86,  171,  981,
      981,  981,    0,   66,  116,  144,  154,  111,  192,  134,
      175,  172,  151,   82,    0,  165,  183,  174,  195,  207,
      196,  215,  194,  199,    0,    0,  215,    0,  220,  218,
      206,  211,  208,  208,  213,  221,  229,  238,    0,  248,
      242,  245,  981,  283,  287,  257,  262,    0,    0,   69,

      261,    0,  263,  262,  261,  262,  268,  279,   91,  268,
      286,  308,  276,  293,  284,  294,  287,  289,  292,    0,
      299,  291,    0,  302,  292,  296,  306,    0,  307,    0,
      309,  319,  318,  327,  358,  329,  332,  321,  344,  346,
      333,  338,  339,    0,  349,    0,    0,  153,  371,    0,
      357,  347,  362,  348,    0,    0,    0,    0,  354,  355,
      367,    0,    0,  395,  368,  373,  381,  382,  351,  371,
        0,  436,    0,    0,  382,  382,    0,  380,  386,    0,
      396,  395,  419,    0,  395,  424,  396,  397,    0,  413,
        0,  445,  415,  406,  415,  416,  451,  422,  418,  452,

      469,  478,  480,  491,    0,  449,  451,  458,    0,  466,
      462,    0,    0,  498,  479,  478,  505,  471,  487,  477,
      481,    0,  544,    0,    0,  527,  506,  525,  548,  559,
      550,    0,  510,  504,  522,  981,  537,  496,  529,  459,
        0,  537,  550,  540,  542,  557,  568,  560,  554,  588,
      578,  575,  578,  602,  621,  619,  630,  569,    0,    0,
      588,    0,  579,    0,    0,  589,  592,    0,    0,  595,
      607,  617,  606,  609,  520,  617,  645,  646,  660,  670,
      981,  625,  623,    0,  625,    0,  624,  642,  633,  643,
      655,  681,  658,  682,  698,  694,  705,  672,    0,  981,

      673,  695,  683,  981,  981,    0,  981,  704,  721,  730,
      732,  741,  742,  711,  754,  981,  981,  660,  704,  717,
        0,  736,  760,  766,  773,  786,  768,  774,  738,  981,
      734,  754,  754,  765,  809,  792,  813,  818,  780,  798,
      824,  981,  789,  831,  836,  842,  803,  802,  848,  849,
      855,  981,  981,  856,  860,  861,  862,  843,  869,  823,
      847,  875,  876,  981,  981,  910,  912,  915,  918,  924,
      929,  934,  936,  941,  946,  949,  952,  957,  962,  964,
      969,  974
    } ;

static yyconst flex_int16_t yy_def[383] =
    {   0,
      365,    1,  365,  365,  365,  365,  365,  365,  366,  367,
      365,  365,  365,  365,  365,  365,  365,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  365,  365,  365,  368,  365,  365,
      365,  365,  366,  365,  369,  365,  370,  365,  365,  365,
      365,  365,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  365,  365,  365,  365,  368,  369,  370,  365,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  365,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  365,
      368,  368,  368,  368,  368,  368,  368,  368,  371,  368,
      368,  365,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  372,  368,  368,  368,  368,  368,  365,  368,  368,
      368,  368,  365,  373,  368,  365,  368,  368,  368,  368,
      368,  365,  368,  368,  368,  368,  368,  368,  368,  372,

      372,  372,  372,  372,  368,  368,  365,  368,  368,  368,
      365,  373,  368,  365,  368,  368,  374,  365,  368,  368,
      368,  368,  365,  368,  368,  365,  365,  372,  372,  372,
      372,  368,  365,  368,  368,  365,  365,  368,  368,  375,
      376,  365,  368,  368,  368,  365,  365,  365,  365,  365,
      365,  365,  365,  372,  372,  372,  372,  365,  368,  368,
      365,  368,  368,  377,  376,  365,  368,  368,  368,  365,
      365,  365,  365,  365,  365,  365,  372,  372,  372,  372,
      365,  365,  368,  377,  365,  368,  365,  365,  365,  365,
      365,  378,  365,  379,  372,  365,  372,  365,  368,  365,

      365,  365,  365,  365,  365,  380,  365,  379,  379,  379,
      379,  372,  365,  365,  365,  365,  365,  365,  365,  365,
      380,  365,  379,  379,  379,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  379,  378,  379,  365,  365,  378,
      365,  365,  365,  365,  365,  379,  380,  380,  379,  365,
      378,  365,  365,  380,  380,  381,  382,  365,  382,  365,
      365,  365,  365,  365,    0,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365
    } ;

static yyconst flex_int16_t yy_nxt[1047] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   11,
       13,    4,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   23,   25,   23,   26,   27,   28,   29,
       30,   23,   31,   32,   33,   23,   23,   34,   23,   23,
       23,   18,   19,   20,   21,   22,   23,   24,   23,   25,
       26,   27,   28,   29,   30,   23,   31,   32,   33,   23,
       23,   34,   23,   23,   35,   36,   48,   49,   37,   39,
       40,   40,   41,   41,   40,   40,   41,   50,   51,   56,
       54,  100,   57,  112,   59,   38,  112,   55,   58,   60,
       63,   61,  149,   64,   68,  149,   65,   73,  100,   69,

      101,   62,   44,   66,   56,   54,   74,   57,   59,   67,
       38,   55,   58,   60,   63,   61,   70,   64,   82,   68,
       71,   65,   73,   69,  101,   62,   97,   66,   79,   72,
       74,   75,   42,   67,   80,  102,   42,   81,   76,  105,
       77,   70,   78,   82,   52,   71,   87,   93,   93,   88,
       47,   97,   79,   72,  183,   89,   75,  183,   80,   83,
      102,   81,   76,  105,   77,  103,   78,  108,   84,   85,
      104,   87,   46,   86,   88,   90,   91,   93,   93,   89,
      111,   92,   48,   49,   83,   44,   94,   40,   40,   95,
      103,  108,   84,   85,  109,  104,  110,   86,  113,  114,

       90,   91,  116,  115,  111,   92,   96,   95,   40,   40,
       95,   39,   40,   40,   41,   41,   40,   40,   41,  109,
      106,  110,  113,  114,  117,  118,  116,   96,  115,  107,
      119,   96,  122,  123,  120,  124,  125,  133,  126,  365,
      128,  129,  130,  131,  106,  132,  365,  127,  117,   42,
      118,  121,   96,  107,  119,  134,  122,  123,  135,  120,
      124,  125,  133,  126,  128,  129,  130,  131,  136,  132,
       42,  127,  137,  140,   42,  121,  138,  139,   42,  134,
      141,  142,  146,  135,   94,   40,   40,   95,   95,   40,
       40,   95,  143,  136,  144,  145,  147,  137,  140,  148,

      138,  139,  150,  151,   96,  141,  142,  146,   96,  112,
      153,  156,  112,  154,  157,  160,  143,  158,  144,  145,
      147,  159,  155,  161,  148,  162,  150,  167,  151,   96,
      163,  164,  165,   96,  153,  156,  166,  168,  154,  157,
      160,  158,  152,  169,  176,  159,  155,   42,  161,  162,
      170,   42,  167,  171,  163,  164,  165,  174,  175,  172,
      166,  168,  172,  177,  178,  182,  152,  179,  169,  176,
      180,  181,  149,  185,  170,  149,  186,  171,  187,  365,
      188,  174,  175,  189,  190,  198,  173,  191,  177,  178,
      182,  179,  194,  195,  180,  181,  192,  196,  185,  192,

      186,  197,  205,  187,  188,  199,  206,  189,  190,  198,
      173,  193,  191,  365,  207,  208,  209,  194,  195,  210,
      183,  213,  196,  183,  215,  214,  197,  205,  214,  199,
      216,  206,  217,  219,  365,  220,  193,  172,  207,  208,
      172,  209,  224,  211,  210,  213,  192,  221,  215,  192,
      222,  225,  223,  226,  216,  223,  226,  217,  219,  220,
      240,  227,  201,  240,  202,  365,  218,  224,  211,  203,
      226,  221,  204,  226,  222,  225,  365,  232,  227,  226,
      233,  226,  226,  236,  226,  228,  201,  227,  202,  227,
      234,  218,  226,  203,  235,  226,  204,  238,  239,  214,

      227,  232,  214,  242,  233,  243,  240,  231,  236,  240,
      228,  230,  244,  229,  234,  245,  262,   53,  235,  237,
      365,  292,  238,  239,  292,  251,  226,  242,  250,  226,
      243,  250,  231,  365,  227,  230,  244,  229,  365,  245,
      253,  262,  258,  259,  237,  223,  251,  263,  223,  226,
      251,  226,  226,  266,  226,  260,  252,  227,  254,  227,
      226,  253,  246,  226,  253,  247,  258,  259,  227,  261,
      267,  251,  263,  268,  248,  255,  257,  249,  266,  260,
      252,  269,  254,  270,  271,  253,  272,  246,  273,  250,
      247,  256,  250,  261,  274,  267,  275,  268,  248,  255,

      257,  249,  276,  226,  282,  269,  226,  270,  281,  271,
      272,  227,  273,  283,  365,  256,  285,  252,  286,  274,
      226,  275,  226,  226,  287,  226,  288,  276,  227,  282,
      227,  226,  281,  289,  226,  290,  277,  283,  278,  227,
      285,  252,  286,  291,  293,  300,  294,  226,  287,  294,
      226,  288,  298,  279,  227,  227,  299,  301,  289,  290,
      277,  296,  302,  278,  296,  280,  295,  291,  293,  227,
      300,  226,  303,  304,  226,  305,  298,  279,  307,  227,
      299,  301,  292,  250,  365,  292,  250,  302,  330,  280,
      297,  295,  316,  317,  365,  313,  303,  304,  313,  226,

      305,  309,  226,  307,  320,  322,  315,  227,  322,  315,
      365,  310,  330,  251,  227,  297,  311,  316,  317,  318,
      365,  365,  322,  314,  319,  322,  309,  365,  253,  320,
      312,  322,  327,  322,  322,  310,  322,  323,  251,  331,
      311,  332,  326,  313,  318,  326,  313,  314,  319,  365,
      227,  324,  253,  365,  312,  328,  325,  327,  328,  341,
      333,  322,  323,  331,  322,  334,  332,  336,  342,  340,
      336,  314,  340,  251,  322,  328,  324,  322,  328,  365,
      343,  325,  344,  329,  341,  333,  345,  338,  253,  334,
      338,  365,  342,  292,  335,  314,  292,  365,  251,  340,

      337,  350,  340,  329,  343,  251,  344,  329,  365,  352,
      322,  345,  253,  322,  322,  339,  347,  322,  335,  338,
      253,  348,  338,  355,  337,  351,  350,  329,  351,  346,
      251,  354,  353,  349,  352,  353,  365,  353,  365,  339,
      353,  347,  365,  322,  253,  348,  322,  339,  355,  322,
      356,  362,  322,  356,  346,  354,  351,  353,  349,  351,
      353,  353,  356,  358,  353,  356,  358,  360,  363,  365,
      358,  339,  361,  358,  321,  362,  364,  364,  365,  364,
      364,  321,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  360,  363,  365,  365,  361,  365,  365,  365,

      365,  306,  321,  365,  365,  365,  365,  365,  365,  321,
       43,   43,  365,   43,   43,   43,   45,   45,   53,   53,
       53,   98,   98,   98,   99,   99,  365,   99,   99,   99,
      184,  365,  365,  184,  184,  200,  365,  365,  200,  212,
      212,  212,  241,  365,  241,  241,  241,  264,  365,  365,
      264,  264,  265,  265,  265,  284,  284,  284,  306,  365,
      365,  306,  306,  308,  365,  365,  308,  321,  321,  321,
      357,  365,  365,  357,  357,  359,  365,  359,  359,  359,
        3,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365
    } ;

static yyconst flex_int16_t yy_chk[1047] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   14,   14,    2,    5,
        5,    5,    5,    8,    8,    8,    8,   15,   15,   19,
       18,  100,   20,   64,   21,    2,   64,   18,   20,   22,
       24,   22,  109,   24,   26,  109,   25,   28,   48,   26,

       54,   22,   43,   25,   19,   18,   28,   20,   21,   25,
        2,   18,   20,   22,   24,   22,   27,   24,   31,   26,
       27,   25,   28,   26,   54,   22,   38,   25,   30,   27,
       28,   29,    5,   25,   30,   55,    8,   30,   29,   58,
       29,   27,   29,   31,   17,   27,   33,   35,   35,   33,
       13,   38,   30,   27,  148,   33,   29,  148,   30,   32,
       55,   30,   29,   58,   29,   56,   29,   60,   32,   32,
       57,   33,   12,   32,   33,   34,   34,   42,   42,   33,
       63,   34,   49,   49,   32,    9,   36,   36,   36,   36,
       56,   60,   32,   32,   61,   57,   62,   32,   66,   66,

       34,   34,   68,   67,   63,   34,   36,   37,   37,   37,
       37,   39,   39,   39,   39,   41,   41,   41,   41,   61,
       59,   62,   66,   66,   69,   70,   68,   37,   67,   59,
       71,   36,   73,   74,   72,   77,   79,   86,   80,    3,
       81,   82,   83,   84,   59,   85,    0,   80,   69,   36,
       70,   72,   37,   59,   71,   87,   73,   74,   88,   72,
       77,   79,   86,   80,   81,   82,   83,   84,   90,   85,
       37,   80,   90,   96,   39,   72,   91,   92,   41,   87,
       97,  101,  106,   88,   94,   94,   94,   94,   95,   95,
       95,   95,  103,   90,  104,  105,  107,   90,   96,  108,

       91,   92,  110,  111,   94,   97,  101,  106,   95,  112,
      113,  115,  112,  114,  116,  119,  103,  117,  104,  105,
      107,  118,  114,  121,  108,  122,  110,  129,  111,   94,
      124,  125,  126,   95,  113,  115,  127,  131,  114,  116,
      119,  117,  112,  132,  138,  118,  114,   94,  121,  122,
      133,   95,  129,  134,  124,  125,  126,  136,  137,  135,
      127,  131,  135,  139,  140,  145,  112,  141,  132,  138,
      142,  143,  149,  151,  133,  149,  152,  134,  153,    0,
      154,  136,  137,  159,  160,  169,  135,  161,  139,  140,
      145,  141,  165,  166,  142,  143,  164,  167,  151,  164,

      152,  168,  175,  153,  154,  170,  176,  159,  160,  169,
      135,  164,  161,    0,  178,  179,  181,  165,  166,  182,
      183,  185,  167,  183,  187,  186,  168,  175,  186,  170,
      188,  176,  190,  193,    0,  194,  164,  172,  178,  179,
      172,  181,  198,  183,  182,  185,  192,  195,  187,  192,
      196,  199,  197,  200,  188,  197,  200,  190,  193,  194,
      240,  200,  172,  240,  172,    0,  192,  198,  183,  172,
      201,  195,  172,  201,  196,  199,    0,  206,  201,  202,
      207,  203,  202,  211,  203,  201,  172,  202,  172,  203,
      208,  192,  204,  172,  210,  204,  172,  215,  216,  214,

      204,  206,  214,  218,  207,  219,  217,  204,  211,  217,
      201,  203,  220,  202,  208,  221,  238,  217,  210,  214,
        0,  275,  215,  216,  275,  227,  228,  218,  226,  228,
      219,  226,  204,    0,  228,  203,  220,  202,    0,  221,
      227,  238,  233,  234,  214,  223,  226,  239,  223,  229,
      227,  231,  229,  242,  231,  235,  226,  229,  228,  231,
      230,  226,  223,  230,  227,  223,  233,  234,  230,  237,
      243,  226,  239,  244,  223,  229,  231,  223,  242,  235,
      226,  245,  228,  246,  247,  226,  248,  223,  249,  250,
      223,  230,  250,  237,  251,  243,  252,  244,  223,  229,

      231,  223,  253,  254,  261,  245,  254,  246,  258,  247,
      248,  254,  249,  263,    0,  230,  266,  250,  267,  251,
      256,  252,  255,  256,  270,  255,  271,  253,  256,  261,
      255,  257,  258,  272,  257,  273,  254,  263,  255,  257,
      266,  250,  267,  274,  276,  285,  277,  278,  270,  277,
      278,  271,  282,  256,  277,  278,  283,  287,  272,  273,
      254,  279,  288,  255,  279,  257,  278,  274,  276,  279,
      285,  280,  289,  290,  280,  291,  282,  256,  293,  280,
      283,  287,  292,  294,    0,  292,  294,  288,  318,  257,
      280,  278,  298,  301,    0,  296,  289,  290,  296,  295,

      291,  294,  295,  293,  303,  308,  297,  295,  308,  297,
        0,  294,  318,  296,  297,  280,  294,  298,  301,  302,
        0,    0,  309,  296,  302,  309,  294,    0,  296,  303,
      295,  310,  314,  311,  310,  294,  311,  309,  296,  319,
      294,  320,  312,  313,  302,  312,  313,  296,  302,    0,
      312,  310,  296,    0,  295,  315,  311,  314,  315,  329,
      322,  323,  309,  319,  323,  322,  320,  324,  331,  327,
      324,  313,  327,  315,  325,  328,  310,  325,  328,    0,
      332,  311,  333,  315,  329,  322,  334,  326,  315,  322,
      326,    0,  331,  336,  323,  313,  336,    0,  315,  340,

      325,  339,  340,  328,  332,  326,  333,  315,    0,  343,
      335,  334,  315,  335,  337,  326,  336,  337,  323,  338,
      326,  336,  338,  348,  325,  341,  339,  328,  341,  335,
      326,  347,  344,  337,  343,  344,    0,  345,    0,  326,
      345,  336,    0,  346,  326,  336,  346,  338,  348,  349,
      350,  360,  349,  350,  335,  347,  351,  354,  337,  351,
      354,  355,  356,  357,  355,  356,  357,  358,  361,    0,
      359,  338,  358,  359,  357,  360,  362,  363,    0,  362,
      363,  359,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  358,  361,    0,    0,  358,    0,    0,    0,

        0,  356,  357,    0,    0,    0,    0,    0,    0,  359,
      366,  366,    0,  366,  366,  366,  367,  367,  368,  368,
      368,  369,  369,  369,  370,  370,    0,  370,  370,  370,
      371,    0,    0,  371,  371,  372,    0,    0,  372,  373,
      373,  373,  374,    0,  374,  374,  374,  375,    0,    0,
      375,  375,  376,  376,  376,  377,  377,  377,  378,    0,
        0,  378,  378,  379,    0,    0,  379,  380,  380,  380,
      381,    0,    0,  381,  381,  382,    0,  382,  382,  382,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "engines/director/lingo/lingo-lex.l"
/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */
#define YY_NO_INPUT 1
#line 32 "engines/director/lingo/lingo-lex.l"

#define YY_NO_UNISTD_H
#define FORBIDDEN_SYMBOL_ALLOW_ALL

#include "common/str.h"

#include "director/director.h"
#include "director/lingo/lingo.h"
#include "director/lingo/lingo-gr.h"
#include "director/lingo/lingo-the.h"

#define register

using namespace Director;

int yyparse();

static void count() {
	if (debugChannelSet(-1, kDebugLingoParse))
		debug("LEXER: Read '%s' at %d:%d", yytext, g_lingo->_linenumber, g_lingo->_colnumber);

	char *p = yytext;

	while (*p && *p != '\n' && *p != '\r') {
		p++;
		g_lingo->_colnumber++;
	}

	while (*p == '\n' || *p == '\r') {
		if (*p == '\n') {
			g_lingo->_linenumber++;
			g_lingo->_colnumber = 0;
		}

		p++;
	}

	g_lingo->_colnumber = strlen(p);
}

static int checkImmediate(int token) {
	if (g_lingo->_immediateMode) {
		yylval.s = new Common::String(yytext);

		return ID;
	}

	return token;
}

#line 882 "engines/director/lingo/lingo-lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 92 "engines/director/lingo/lingo-lex.l"


#line 1068 "engines/director/lingo/lingo-lex.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 366 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 365 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 94 "engines/director/lingo/lingo-lex.l"
{ count(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "engines/director/lingo/lingo-lex.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 96 "engines/director/lingo/lingo-lex.l"
{ count(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 97 "engines/director/lingo/lingo-lex.l"
{ count(); return ' '; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 99 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(yytext); return SYMBOL; }	// D3
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 101 "engines/director/lingo/lingo-lex.l"
{ count(); return tAFTER; }		// D3
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 102 "engines/director/lingo/lingo-lex.l"
{ count(); return tAND; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "engines/director/lingo/lingo-lex.l"
{ count(); return tBEFORE; }	// D3
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "engines/director/lingo/lingo-lex.l"
{ count(); return tCHAR; }		// D3
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "engines/director/lingo/lingo-lex.l"
{ count(); return tCONTAINS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "engines/director/lingo/lingo-lex.l"
{ count(); return tDONE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 107 "engines/director/lingo/lingo-lex.l"
{ count(); return tDOWN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "engines/director/lingo/lingo-lex.l"
{ count(); return tIF; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "engines/director/lingo/lingo-lex.l"
{ count(); return tELSIF; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "engines/director/lingo/lingo-lex.l"
{ count(); return tELSE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'end '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (!scumm_stricmp(ptr, "if"))
			return tENDIF;
		else if (!scumm_stricmp(ptr, "repeat"))
			return tENDREPEAT;
		else if (!scumm_stricmp(ptr, "tell"))
			return tENDTELL;

		yylval.s = new Common::String(ptr);

		return ENDCLAUSE;
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 129 "engines/director/lingo/lingo-lex.l"
{ count(); return tFACTORY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 130 "engines/director/lingo/lingo-lex.l"
{ count(); return tEXIT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 131 "engines/director/lingo/lingo-lex.l"
{ count(); return tGLOBAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 132 "engines/director/lingo/lingo-lex.l"
{ count(); return tGO; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 133 "engines/director/lingo/lingo-lex.l"
{ count(); return tGO; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 134 "engines/director/lingo/lingo-lex.l"
{ count(); return tGO; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 135 "engines/director/lingo/lingo-lex.l"
{ count(); return tINSTANCE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 136 "engines/director/lingo/lingo-lex.l"
{ count(); return tINTERSECTS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 137 "engines/director/lingo/lingo-lex.l"
{ count(); return tINTO; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 138 "engines/director/lingo/lingo-lex.l"
{ count(); return tIN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 139 "engines/director/lingo/lingo-lex.l"
{ count(); return tITEM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 140 "engines/director/lingo/lingo-lex.l"
{ count(); return tLINE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 141 "engines/director/lingo/lingo-lex.l"
{ count(); return checkImmediate(tLOOP); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 142 "engines/director/lingo/lingo-lex.l"
{ count(); return tMACRO; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 143 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[6]; // Skip 'method '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		yylval.s = new Common::String(ptr);

		return tMETHOD;
	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 154 "engines/director/lingo/lingo-lex.l"
{ count(); return tMOD; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 155 "engines/director/lingo/lingo-lex.l"
{ count(); return tMOVIE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 156 "engines/director/lingo/lingo-lex.l"
{ count(); return tNEXT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "engines/director/lingo/lingo-lex.l"
{ count(); return tNOT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 158 "engines/director/lingo/lingo-lex.l"
{ count(); return tOF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 159 "engines/director/lingo/lingo-lex.l"
{ count(); return tON; }		// D3
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 160 "engines/director/lingo/lingo-lex.l"
{ count(); return tOPEN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 161 "engines/director/lingo/lingo-lex.l"
{ count(); return tOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 162 "engines/director/lingo/lingo-lex.l"
{ count(); return tPLAY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 163 "engines/director/lingo/lingo-lex.l"
{ count(); return tPLAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 164 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(yytext); return tPLAYACCEL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 165 "engines/director/lingo/lingo-lex.l"
{ count(); return tPREVIOUS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 166 "engines/director/lingo/lingo-lex.l"
{ count(); return tPROPERTY; }	// D4
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 167 "engines/director/lingo/lingo-lex.l"
{ count(); return tPUT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 168 "engines/director/lingo/lingo-lex.l"
{ count(); return checkImmediate(tREPEAT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 169 "engines/director/lingo/lingo-lex.l"
{ count(); return tSET; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[6]; // Skip 'sound '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		Common::String bltin = Common::String::format("sound-%s", ptr);

		if (g_lingo->_builtins.contains(bltin)) {
			yylval.s = new Common::String(bltin);
			return BLTIN;
		} else {
			warning("LEXER: Unhandled 'sound %s'", ptr);
			return LEXERROR;
		}
	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "engines/director/lingo/lingo-lex.l"
{ count(); return tSTARTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "engines/director/lingo/lingo-lex.l"
{ count(); return tTELL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "engines/director/lingo/lingo-lex.l"
{
		count();

		yylval.e[0] = g_lingo->_theEntities["sqrt"]->entity;
		yylval.e[1] = 0;	// No field

		return THEENTITYWITHID;
	}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 197 "engines/director/lingo/lingo-lex.l"
{
		count();

		yylval.s = new Common::String("value");

		return FBLTIN;
	}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 204 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t') ptr++;

		ptr += 6; // skip 'number '
		while (*ptr == ' ' || *ptr == '\t') ptr++;

		ptr += 3; // Skip 'of '
		while (*ptr == ' ' || *ptr == '\t') ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		// the number of menuItems of menu <xx>
		if (!field.compareToIgnoreCase("menuItems")) {
			Common::String key = Common::String::format("%dnumber", kTheMenuItems);

			yylval.e[0] = kTheMenuItems;
			yylval.e[1] = g_lingo->_theEntityFields[key]->field;

			return THEMENUITEMSENTITY;
		}

		yylval.s = new Common::String(Common::String::format("numberOf%s", field.c_str()));

		if (g_lingo->_builtins.contains(*yylval.s)) {
			return FBLTIN;
		} else {
			warning("LEXER: Unhandled chunk expression '%s'", yylval.s->c_str());
			return LEXERROR;
		}
	}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 239 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t') ptr++;

		ptr += 5; // skip 'last '
		while (*ptr == ' ' || *ptr == '\t') ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		yylval.s = new Common::String(Common::String::format("last%sOf", field.c_str()));

		if (g_lingo->_builtins.contains(*yylval.s)) {
			return FBLTIN;
		} else {
			warning("LEXER: Unhandled chunk expression '%s'", yylval.s->c_str());
			return LEXERROR;
		}
	}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 261 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		ptr += 3; // Skip 'of '

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (g_lingo->_theEntities.contains(ptr)) {
			field = Common::String::format("%d%s", g_lingo->_theEntities[ptr]->entity, field.c_str());

			if (!g_lingo->_theEntityFields.contains(field)) {
				warning("LEXER: Unhandled the field %s of %s", field.c_str(), ptr);
				return LEXERROR;
			}

			if (g_lingo->_theEntityFields[field]->entity != g_lingo->_theEntities[ptr]->entity) {
				warning("LEXER: Unsupported field '%s' for entity '%s'", field.c_str(), ptr);
				return LEXERROR;
			}

			yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
			yylval.e[1] = g_lingo->_theEntityFields[field]->field;

			// the <field> of menuItem <expr>" of menu <expr>
			if (g_lingo->_theEntityFields[field]->entity == kTheMenuItem)
				return THEMENUITEMENTITY;

			if (g_lingo->_theEntities[ptr]->hasId)
				return THEENTITYWITHID;
			else
				return THEENTITY;
		} else {
			if (g_director->getVersion() >= 4) {
				Common::String key = Common::String::format("%d%s", g_lingo->_objectEntityId, field.c_str());

				if (!g_lingo->_theEntityFields.contains(key)) { // Okay, this must be an object reference
					yylval.objectref.obj = new Common::String(ptr);
					yylval.objectref.field = new Common::String(field);

					return THEOBJECTREF;
				}

				yylval.objectfield.os = new Common::String(ptr);
				yylval.objectfield.oe = g_lingo->_theEntityFields[key]->field;

				return THEOBJECTFIELD;
			}
		}

		warning("LEXER: Unhandled the entity '%s', field '%s'", ptr, field.c_str());
	}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 324 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		Common::String field;
		while (*ptr != ' ' && *ptr != '\t')
			field += *ptr++;

		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		field = Common::String::format("%d%s", g_lingo->_theEntities[ptr]->entity, field.c_str());

		if (!g_lingo->_theEntityFields.contains(field)) {
			warning("LEXER: Unhandled the field %s", ptr);
			return LEXERROR;
		}

		if (g_lingo->_theEntityFields[field]->entity != g_lingo->_theEntities[ptr]->entity) {
			warning("LEXER: Unsupported field '%s' for entity '%s'", field.c_str(), ptr);
			return LEXERROR;
		}

		yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
		yylval.e[1] = g_lingo->_theEntityFields[field]->field;

		if (g_lingo->_theEntities[ptr]->hasId)
			return THEENTITYWITHID;
		else
			return THEENTITY;
	}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 358 "engines/director/lingo/lingo-lex.l"
{
		count();

		const char *ptr = &yytext[4]; // Skip 'the '
		while (*ptr == ' ' || *ptr == '\t')
			ptr++;

		if (g_lingo->_theEntities.contains(ptr)) {
			yylval.e[0] = g_lingo->_theEntities[ptr]->entity;
			yylval.e[1] = 0;	// No field

			if (g_lingo->_theEntities[ptr]->hasId)
				return THEENTITYWITHID;
			else
				return THEENTITY;
		}

		warning("LEXER: Unhandled the entity '%s'", ptr);
	}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 377 "engines/director/lingo/lingo-lex.l"
{ count(); return tTHEN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 378 "engines/director/lingo/lingo-lex.l"
{ count(); return tTO; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 379 "engines/director/lingo/lingo-lex.l"
{ count(); return tSPRITE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 380 "engines/director/lingo/lingo-lex.l"
{ count(); return tWITH; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 381 "engines/director/lingo/lingo-lex.l"
{ count(); return tWITHIN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 382 "engines/director/lingo/lingo-lex.l"
{ count(); return tWHEN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 383 "engines/director/lingo/lingo-lex.l"
{ count(); return tWHILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 384 "engines/director/lingo/lingo-lex.l"
{ count(); return tWORD; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 386 "engines/director/lingo/lingo-lex.l"
{ count(); return tNEQ; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 387 "engines/director/lingo/lingo-lex.l"
{ count(); return tGE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 388 "engines/director/lingo/lingo-lex.l"
{ count(); return tLE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 389 "engines/director/lingo/lingo-lex.l"
{ count(); return tCONCAT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 390 "engines/director/lingo/lingo-lex.l"
{ count(); return tEQ; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 392 "engines/director/lingo/lingo-lex.l"
{
		count();
		yylval.s = new Common::String(yytext);

		if (g_lingo->_ignoreMe && yylval.s->equalsIgnoreCase("me"))
			return ID;

		// When we are defining arguments, allow any string
		if (g_lingo->_indef == kStateInArgs)
			return ID;

		// First of all, match against argument list
		if (g_lingo->_indef == kStateInDef)
			if (g_lingo->isInArgStack(yylval.s))
				return ID;

		if (g_lingo->_builtins.contains(yytext)) {
			int type = g_lingo->_builtins[yytext]->type;
			if ((type == BLTIN || type == FBLTIN || type == RBLTIN) && g_lingo->_builtins[yytext]->parens == false) {
				if (type == RBLTIN) {
					if (g_lingo->_builtins[yytext]->nargs != 1 || g_lingo->_builtins[yytext]->maxArgs != 1) {
						warning("Incorrectly set RBLTIN %s", yytext);
						return LEXERROR;
					}

					return RBLTIN;
				}

				return type;
			}
		}

		return ID;
	}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 426 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.f = atof(yytext); return FLOAT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 427 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.i = strtol(yytext, NULL, 10); return INT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 428 "engines/director/lingo/lingo-lex.l"
{ count(); return *yytext; }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 429 "engines/director/lingo/lingo-lex.l"
{ count(); return '\n'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 430 "engines/director/lingo/lingo-lex.l"
{ count(); yylval.s = new Common::String(&yytext[1]); yylval.s->deleteLastChar(); return STRING; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 431 "engines/director/lingo/lingo-lex.l"
{ count(); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 433 "engines/director/lingo/lingo-lex.l"
ECHO;
	YY_BREAK
#line 1797 "engines/director/lingo/lingo-lex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 366 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 366 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 365);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 433 "engines/director/lingo/lingo-lex.l"



extern int yydebug;

namespace Director {

int Lingo::parse(const char *code) {
	YY_BUFFER_STATE bp;

	if (debugChannelSet(-1, kDebugLingoParse))
		yydebug = 1;
	else
		yydebug = 0;

	yy_delete_buffer(YY_CURRENT_BUFFER);

	bp = yy_scan_string(code);
	yy_switch_to_buffer(bp);
	yyparse();
	yy_delete_buffer(bp);

	return 0;
}

} // End of namespace Director

